<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.7.4">Jekyll</generator>
  <link href="http://maximomussini.com/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://maximomussini.com/" rel="alternate" type="text/html" />
  <updated>2020-06-21T12:26:57-03:00</updated>
  <id>http://maximomussini.com/</id>
  <title>M√°ximo Mussini</title>
  <subtitle>Thoughts about development and product design.</subtitle>
  <author>
    <name>M√°ximo Mussini</name>
    <email>maximomussini@gmail.com</email>
  </author>

  <entry>
    <title>Store Objects for Vuex</title>
    <link href="http://maximomussini.com/posts/vuex-stores/" rel="alternate" type="text/html" title="Store Objects for Vuex" />
    <published>2020-05-12T00:20:00-03:00</published>
  
    <updated>2020-05-12T00:20:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/vuex-stores</id>
    <content type="html" xml:base="http://maximomussini.com/posts/vuex-stores/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/vuex-stores.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;&lt;a href=&quot;https://vuex.vuejs.org/&quot;&gt;Vuex&lt;/a&gt; is a state-management solution that integrates nicely with
&lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; components.&lt;/p&gt;

&lt;p&gt;When starting to use Vuex, one quickly realizes that it‚Äôs easier to manage and
understand the state of a large application when the state is split between
different &lt;a href=&quot;https://vuex.vuejs.org/guide/modules.html&quot;&gt;modules in the Vuex store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, working with modules involves using a &lt;em&gt;namespace string&lt;/em&gt; to
access state and getters, which makes typos hard to detect, and can
quickly become cumbersome if using &lt;a href=&quot;https://vuex.vuejs.org/guide/mutations.html#using-constants-for-mutation-types&quot;&gt;constants&lt;/a&gt; or a similar
approach to avoid duplication.&lt;/p&gt;

&lt;p&gt;Another weak spot is that dispatching actions feels very unnatural, and also
requires specifying the &lt;em&gt;namespace string&lt;/em&gt; as a prefix for the action name.&lt;/p&gt;

&lt;h3 id=&quot;a-smoother-experience-&quot;&gt;A smoother experience ü•É&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ElMassimo/vuex-stores&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vuex-stores&lt;/code&gt;&lt;/a&gt; library helps you avoid these shortcomings
by providing light wrappers around individual &lt;a href=&quot;https://vuex.vuejs.org/guide/modules.html&quot;&gt;Vuex store modules&lt;/a&gt;,
which I‚Äôve dubbed &lt;em&gt;‚Äústore-objects‚Äù&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Store objects&lt;/em&gt; address these issues by allowing access to state and getters as
properties, and dispatching actions easily by using plain method calls.&lt;/p&gt;

&lt;p&gt;As a result, it‚Äôs possible to leverage all the goodness in Vuex, using an
&lt;a href=&quot;https://github.com/ElMassimo/vuex-stores#api-%EF%B8%8F&quot;&gt;elegant and convenient API&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;conventions-&quot;&gt;Conventions üî§&lt;/h3&gt;

&lt;p&gt;In order to organize these store objects, an approach that works nicely is to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create one file per store module under a &lt;code class=&quot;highlighter-rouge&quot;&gt;stores&lt;/code&gt; directory.&lt;/li&gt;
  &lt;li&gt;Always use &lt;code class=&quot;highlighter-rouge&quot;&gt;Store&lt;/code&gt; as a suffix for the file name (&lt;code class=&quot;highlighter-rouge&quot;&gt;ModalsStore&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;@stores&lt;/code&gt; webpack alias to make them convenient to import.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs take a look at an example usage:&lt;/p&gt;

&lt;div class=&quot;language-vue highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ModalsStore&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@stores/ModalsStore'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ModalManager'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// `mapState` and friends are available to inject state or getters into the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// template, without the need to specify the namespace string.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ModalsStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'modals'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeMount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// closeAllModals is an action, and it will be dispatched every time the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// route changes, to hide any open modals.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;afterEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ModalsStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closeAllModals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Actions are available as methods, notice the lack of boilerplate to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// inject it in the component using `mapActions`.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;onModalClose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ModalsStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// NOTE: A shorter version would be: `onModalClose: ModalsStore.removeModal,`&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modal-manager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;component&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;:is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modal.component&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modal in modals&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;:key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modal.id&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;v-bind=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modal.attrs&quot;&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;modal:close=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onModalClose(modal)&quot;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As seen in this short example, state, getters, and actions can be easily injected
in a component using &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; helpers to make them available in the template.&lt;/p&gt;

&lt;p&gt;Actions can be dispatched by simply calling a method, which is closer to how
they are defined, and feels very natural. Typos in action names are prevented,
since a method call would fail if the name is not correct (instead of being ignored)&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;namespace string&lt;/em&gt; becomes an implementation detail which is transparent to
the user, without having to use cumbersome manual techniques (such as &lt;a href=&quot;https://vuex.vuejs.org/guide/mutations.html#using-constants-for-mutation-types&quot;&gt;constants&lt;/a&gt;)
to avoid duplicating the module name all over the codebase.&lt;/p&gt;

&lt;p&gt;Because incorrect ES6 imports provide clear errors, typos in the store name can
be detected at compile time, and refactoring becomes a lot easier (usually as
simple as &lt;em&gt;search and replace&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;There are more code samples available in the &lt;a href=&quot;https://github.com/ElMassimo/vuex-stores#api-%EF%B8%8F&quot;&gt;documentation&lt;/a&gt; üìñ&lt;/p&gt;

&lt;h3 id=&quot;code-splitting-Ô∏è&quot;&gt;Code Splitting ‚úÇÔ∏è&lt;/h3&gt;

&lt;p&gt;Store modules in Vuex can be &lt;a href=&quot;https://vuex.vuejs.org/guide/modules.html#dynamic-module-registration&quot;&gt;registered dynamically&lt;/a&gt;,
so internally &lt;a href=&quot;https://github.com/ElMassimo/vuex-stores&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vuex-stores&lt;/code&gt;&lt;/a&gt; leverages &lt;code class=&quot;highlighter-rouge&quot;&gt;registerModule&lt;/code&gt; to
add a new module when the store object is imported.&lt;/p&gt;

&lt;p&gt;This means that store objects don‚Äôt need to be imported up-front when initially
defining the Vuex store, playing nicely with apps that do code splitting, since
the code associated to a store object will only be loaded if needed.&lt;/p&gt;

&lt;p&gt;As a result, the initial setup of the Vuex store will be lighter, and by
using the conventions described above, code loading and execution will be
optimized.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ElMassimo/vuex-stores&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vuex-stores&lt;/code&gt;&lt;/a&gt; provides a simple way to work with &lt;a href=&quot;https://vuex.vuejs.org/guide/modules.html&quot;&gt;Vuex modules&lt;/a&gt;
by allowing you to define &lt;em&gt;store objects&lt;/em&gt; to focus on one module at a time,
making it more enjoyable to leverage Vuex.&lt;/p&gt;

&lt;p&gt;The API is convenient and easy to learn, prevents mistakes such as typos, and
works nicely when used in conjunction with ES6 modules, making the code easier
to reason about and refactor.&lt;/p&gt;

&lt;p&gt;Also, it‚Äôs a lot of fun, give it a try! üòÉ&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/vuex-stores.jpg" />
    <author>
      <name>M√°ximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
    <summary>It's easier to manage and understand state in Vuex when it is split between different modules. However, the default approach has some shortcomings that make modules cumbersome to use.

Read on to find out how to leverage all the goodness in Vuex using a more natural and convenient API, making your app easier to reason about and refactor.</summary>
  
  </entry>

  <entry>
    <title>Documentation is a Great Investment</title>
    <link href="http://maximomussini.com/posts/documentation-is-a-great-investment/" rel="alternate" type="text/html" title="Documentation is a Great Investment" />
    <published>2020-02-17T00:00:00-03:00</published>
  
    <updated>2020-02-17T00:00:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/documentation-is-a-great-investment</id>
    <content type="html" xml:base="http://maximomussini.com/posts/documentation-is-a-great-investment/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/documentation-is-a-great-investment.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;In this post I‚Äôd like to share a practice that has completely changed the way we
work: documentation as a first-class citizen in our software development process.&lt;/p&gt;

&lt;p&gt;Documentation facilitates understanding, which is &lt;em&gt;vital&lt;/em&gt; to enable
change and continuous improvement.&lt;/p&gt;

&lt;h3 id=&quot;how-is-it-helpful-thinking&quot;&gt;How is it helpful? :thinking:&lt;/h3&gt;

&lt;p&gt;Traditionally, we aim to produce clean and maintainable code to make it more
reliable, and write tests to protect it. We use good variable names, split
functions that perform too much into simpler ones, and design them so that
parameter names convey enough information.&lt;/p&gt;

&lt;p&gt;However, seeing &lt;em&gt;what&lt;/em&gt; the code does is not the same as figuring out &lt;em&gt;why&lt;/em&gt; it does it.&lt;/p&gt;

&lt;p&gt;Most of the design process happens informally in chat rooms, conversations, and
online documents. As a result, understanding a decision that was made a long time
ago can be very time consuming, as it requires scanning through chat messages,
and reaching out to the people that were involved.&lt;/p&gt;

&lt;p&gt;When we are not able to obtain enough information about these decisions, it
becomes harder to effectively reason about the software, slowing down fixes and
improvements.&lt;/p&gt;

&lt;p&gt;This is why learning about past decisions should be as efficient and
straightforward as possible: it will save us a lot of time and frustration down
the line. Knowing the context will allow us to make informed decisions,
which are &lt;em&gt;better&lt;/em&gt; decisions.&lt;/p&gt;

&lt;h3 id=&quot;best-time-to-start-was-years-ago-second-best-time-is-now-hourglass&quot;&gt;Best time to start was years ago, second best time is now :hourglass:&lt;/h3&gt;

&lt;p&gt;If we are to make our software easier to understand, and thus easier to change,
we should &lt;strong&gt;&lt;em&gt;document our intent&lt;/em&gt;&lt;/strong&gt; in every possible way. Think about it as a
byproduct of the thought process we carry out as developers when designing a
solution and writing code.&lt;/p&gt;

&lt;p&gt;Capture any breadcrumbs that might be useful in the future to find out how
things are supposed to work, helping other developers unravel the conditions
and mindset that influenced the code, even when we no longer remember why.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Document as you go&lt;/em&gt;&lt;/strong&gt;. No other time will be better to document than when the
ideas are fresh in our mind. Memories fade over time, and what we fail to
record then might be hopeless or painfully time-consuming to remember later.&lt;/p&gt;

&lt;p&gt;The overhead of documenting on the spot is negligible, but the overall benefits
are certainly not!&lt;/p&gt;

&lt;h3 id=&quot;documenting-is-intrinsically-a-valuable-activity-moneybag&quot;&gt;Documenting is intrinsically a valuable activity :moneybag:&lt;/h3&gt;

&lt;p&gt;To get the best out of it, we should imagine we are someone else trying to
understand our work. Which things will not be so obvious a few months from now?
Thinking about it can help to reveal our underlying assumptions and knowledge.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Is it clear how this component interacts with other parts of the system?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By doing this mental exercise, we will be able to find simpler and more readable
ways to solve a problem, allowing us to refine our designs and solutions.
It has a direct positive impact in maintainability, regardless of whether
someone actually reads the resulting documentation.&lt;/p&gt;

&lt;p&gt;Our focus should be on recording intent, &lt;em&gt;why&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt; things &lt;em&gt;should&lt;/em&gt; happen.
It‚Äôs also useful to cross-reference classes and objects that interact with each
other. Aim for the bigger picture, and work your way down as needed.&lt;/p&gt;

&lt;h3 id=&quot;a-lightweight-approach-is-good-enough-zap&quot;&gt;A lightweight approach is good enough :zap:&lt;/h3&gt;

&lt;p&gt;In practice, we‚Äôve found that using a conventional but minimal
&lt;a href=&quot;https://gist.github.com/ElMassimo/a118d08482d9db8e71d622e136f10155#which-format-to-use&quot;&gt;syntax&lt;/a&gt; for comments works well, and that it‚Äôs better to
&lt;a href=&quot;https://gist.github.com/ElMassimo/a118d08482d9db8e71d622e136f10155&quot;&gt;&lt;em&gt;&lt;strong&gt;inline documentation&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; in the code itself.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Public: Abbreviation of a few words that sums up what the question is about.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Example: 'Side Effects'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inline docs are always at hand, require very low effort to add and update, and
are very helpful for developers to gain insight (both during reviews and in the long run).&lt;/p&gt;

&lt;p&gt;They should be clear and concise. Don‚Äôt overstate the obvious and remove any
words that feel unnecessary. &lt;em&gt;&lt;strong&gt;Creating good documentation takes practice&lt;/strong&gt;&lt;/em&gt;,
it‚Äôs more about writing skills and less about programming.&lt;/p&gt;

&lt;p&gt;While it‚Äôs possible to generate documentation pages from a &lt;a href=&quot;https://gist.github.com/ElMassimo/a118d08482d9db8e71d622e136f10155#which-format-to-use&quot;&gt;minimal syntax&lt;/a&gt;,
usually navigating through the source code and reading the inline docs is more
convenient. Using &lt;em&gt;Goto Symbol&lt;/em&gt; or &lt;em&gt;Goto Definition&lt;/em&gt; on any &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;editor&lt;/a&gt; does the trick.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Won‚Äôt the comments become outdated really quickly? :scream_cat:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;version-control-to-the-rescue-&quot;&gt;Version control to the rescue! ü¶∏&lt;/h3&gt;

&lt;p&gt;More often than not, the core concepts in the software we write rarely change,
so the documentation tends to be useful even when not entirely accurate.&lt;/p&gt;

&lt;p&gt;Combined with &lt;a href=&quot;https://git-scm.com/&quot;&gt;source control&lt;/a&gt;, even when the comments are
outdated, the original intention is never lost. We can navigate back through
history and get the full context in which the documentation was written.&lt;/p&gt;

&lt;p&gt;In the same way we should document our intent in methods, properties, and classes,
it‚Äôs also important to capture the broader purpose of changes in commits. This
will enable us to &lt;a href=&quot;https://git-scm.com/docs/git-blame&quot;&gt;look back to learn more&lt;/a&gt;, saving us an
invaluable amount of time when trying to understand past decisions.&lt;/p&gt;

&lt;p&gt;As a result, we can move forward with deeper undestanding and confidence,
refactoring or removing code without fear of accidentally breaking the app, or
going against an otherwise long-forgotten decision.&lt;/p&gt;

&lt;h3 id=&quot;pull-requests-as-the-unit-of-change-&quot;&gt;Pull Requests as the unit of change üß©&lt;/h3&gt;

&lt;p&gt;Usually in a team environment, the &lt;em&gt;pull request&lt;/em&gt; replaces the &lt;em&gt;commit&lt;/em&gt; as the &lt;em&gt;unit
of change&lt;/em&gt;. Besides providing a platform for code review, pull requests are
great for adding rich non-text information, such as images and video, and
hyperlinks to external resources.&lt;/p&gt;

&lt;p&gt;As a result, they also have an immense potential for communication and
documentation. We should leverage the description to explain substantial changes
(&lt;em&gt;why&lt;/em&gt; and &lt;em&gt;what for&lt;/em&gt;), provide screenshots, and any content that makes it
easier to follow the work.&lt;/p&gt;

&lt;p&gt;Doing so will leave a solid trail that can help anyone grasp the full picture
later on, in addition to improving the communication and quality of the reviews.
Two for one!&lt;/p&gt;

&lt;h3 id=&quot;tldr-document-all-the-things-pencil2-book&quot;&gt;TL‚ÄôDR: Document all the things! :pencil2: :book:&lt;/h3&gt;

&lt;p&gt;Code is read a lot more often than it‚Äôs written, which is why inline docs
provide a great return for their tiny cost. Same can be said about writing
a nice pull request description, describing specific decisions in comments,
and providing screenshots.&lt;/p&gt;

&lt;p&gt;We‚Äôve saved a lot of time when figuring out how things work, enabled our team to
refactor with confidence, prevented problems and regressions, and made entire
areas of the app more approachable for other developers.&lt;/p&gt;

&lt;p&gt;The simple practice of documenting helps junior and senior developers alike, and
after you start using it, you‚Äôll be wondering why you didn‚Äôt start sooner :smiley:&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/documentation-is-a-great-investment.jpg" />
    <author>
      <name>M√°ximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
    <summary>Would you like to prevent problems and regressions? Refactor with confidence? Save development time? Make any area of the app accessible to other developers?

Read on to find out how a team that _documents their work_ is on a better path to achieve all the above.</summary>
  
  </entry>

  <entry>
    <title>Ruby Keywords and the Double Splat Operator</title>
    <link href="http://maximomussini.com/posts/ruby-double-splat-keywords/" rel="alternate" type="text/html" title="Ruby Keywords and the Double Splat Operator" />
    <published>2020-01-30T00:00:00-03:00</published>
  
    <updated>2020-01-30T00:00:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/ruby-double-splat-keywords</id>
    <content type="html" xml:base="http://maximomussini.com/posts/ruby-double-splat-keywords/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/ruby-double-splat-keywords.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;One of the nicest bits of syntax sugar in Ruby are &lt;em&gt;keywords&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;**&lt;/code&gt; or &lt;em&gt;double-splat&lt;/em&gt;).&lt;/p&gt;

&lt;h4 id=&quot;keywords-in-method-parameters&quot;&gt;Keywords in Method Parameters&lt;/h4&gt;

&lt;p&gt;Just like the splat operator (&lt;code class=&quot;highlighter-rouge&quot;&gt;*args&lt;/code&gt;) captures any parameters as an &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; of
arguments, the double-splat operator (&lt;code class=&quot;highlighter-rouge&quot;&gt;**attrs&lt;/code&gt;) captures any option parameters
as a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The nice thing is that it allows to destructure a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; argument into any of
its individual keys, and mark it as required, or make it optional and provide a
default value for it.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_name: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:middle_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;first_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Gale'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Hi Gale!&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;last_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'John'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ArgumentError (missing keyword: first_name)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;first_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Bruce'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;middle_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Wayne'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Keaton'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Hi Bruce Wayne Keaton!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There‚Äôs one &lt;strong&gt;&lt;em&gt;big gotcha&lt;/em&gt;&lt;/strong&gt; which comes up a lot when first learning Ruby:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Hi !&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Jane'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ArgumentError (wrong number of arguments (given 1, expected 0))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Many developers have scratched their heads wondering what‚Äôs going on, until
they learn the cause of this unintuitive message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Only &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; keys are allowed in keyword arguments üò≤&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ruby handles keyword arguments differently in its internals, which unfortunately
leaks into this error message.&lt;/p&gt;

&lt;h4 id=&quot;merging-hashes-with-the-double-splat-operator&quot;&gt;Merging Hashes with the Double-Splat operator&lt;/h4&gt;

&lt;p&gt;The double-splat operator can also be used to combine hashes. The order matters,
when resolving duplicate keys, the rightmost ones will take priority.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jane&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jane&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Doe&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Johnson&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# { :first_name =&amp;gt; &quot;Jane&quot;, :last_name =&amp;gt; &quot;Johnson&quot; }&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Johnson&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jane&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# { :last_name =&amp;gt; &quot;Doe, :first_name =&amp;gt; &quot;Jane&quot; }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a few caveats when combining hashes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It does not combine keys of different types, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;It can &lt;strong&gt;only&lt;/strong&gt; be used with Hashes where all keys are &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt;s.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jane&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jane&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Doe&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;first_name&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# { :first_name =&amp;gt; &quot;Jane&quot;, :last_name=&amp;gt;&quot;Doe&quot;, &quot;first_name&quot;=&amp;gt;&quot;John&quot; }&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jane&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;first_name&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jane&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;last_name&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Doe&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;doe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;first_name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# TypeError (hash key &quot;first_name&quot; is not a Symbol)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This message used to be very cryptic like the one for keyword arguments, but it
has improved a lot since the feature was first added üéâ&lt;/p&gt;

&lt;h4 id=&quot;a-quick-note-about-rails&quot;&gt;A quick note about Rails&lt;/h4&gt;

&lt;p&gt;When using Rails a developer might think:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I can obtain values from &lt;code class=&quot;highlighter-rouge&quot;&gt;params&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; keys, but I can‚Äôt pass them
as keyword arguments! Thought they were all &lt;em&gt;Symbol&lt;/em&gt; keys?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The short answer is &lt;em&gt;no&lt;/em&gt;. In Rails controllers, &lt;code class=&quot;highlighter-rouge&quot;&gt;params&lt;/code&gt; is an instance of &lt;em&gt;HashWithIndiferentAccess&lt;/em&gt;.
You may index it with &lt;em&gt;Symbol&lt;/em&gt; keys but internally it uses &lt;em&gt;String&lt;/em&gt; keys.&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;code class=&quot;highlighter-rouge&quot;&gt;symbolize_keys&lt;/code&gt; is our friend here, allowing us to transform any
Hash, such as HTTP parameters, to something we can pass as keyword arguments.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;So there you have it, &lt;code class=&quot;highlighter-rouge&quot;&gt;**&lt;/code&gt; is to &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; what &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; is to &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, and is a very
convenient tool to write shorter, expressive code.&lt;/p&gt;

&lt;p&gt;Just watch out for errors when using non-&lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; keys in keyword arguments,
at least until Ruby improves that error message üòâ&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/ruby-double-splat-keywords.jpg" />
    <author>
      <name>M√°ximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
    <summary>One of the nicest bits of syntax sugar in Ruby are _keywords_.

In this short post we will explore the keyword operator in Ruby, and a few things you should have in mind when first getting started with it.</summary>
  
  </entry>

  <entry>
    <title>Automatic Trailing Commas for Version Control</title>
    <link href="http://maximomussini.com/posts/trailing-commas/" rel="alternate" type="text/html" title="Automatic Trailing Commas for Version Control" />
    <published>2019-04-03T23:50:00-03:00</published>
  
    <updated>2019-04-03T23:50:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/trailing-commas</id>
    <content type="html" xml:base="http://maximomussini.com/posts/trailing-commas/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/trailing-commas.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;Today I‚Äôd like to share a simple but very useful practice for managing Ruby and
JS code under version control.&lt;/p&gt;

&lt;p&gt;In our team, we always use trailing commas when defining multi-line literals for
arrays and hash (object in JS) literals.&lt;/p&gt;

&lt;p&gt;It‚Äôs great that both Ruby and JS allow this in their syntax, because as a result
we are able to get cleaner diffs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/trailing-commas/standard-vs-trailing.png&quot; alt=&quot;Standard vs Trailing&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how the same code change results in a drastically simpler diff: &lt;em&gt;adding
or removing an item changes a single line, nothing more&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;automation-&quot;&gt;Automation ü§ñ&lt;/h3&gt;
&lt;p&gt;To make this practice effortless, we have modified the configuration of the
static analysis tools (&lt;a href=&quot;https://github.com/rubocop-hq/rubocop&quot;&gt;&lt;em&gt;Rubocop&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;https://eslint.org/&quot;&gt;&lt;em&gt;ESLint&lt;/em&gt;&lt;/a&gt;),
to require trailing commas in multi-line literals.&lt;/p&gt;

&lt;p&gt;We have also set up &lt;a href=&quot;https://github.com/guard/guard&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Guard&lt;/code&gt;&lt;/a&gt; to listen for file changes and automatically run
the tools with &lt;code class=&quot;highlighter-rouge&quot;&gt;--autofix&lt;/code&gt;, so that commas are automatically added when we
forget; we don‚Äôt really need to think about it.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;ESLint&lt;/em&gt; for JS:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;comma-dangle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;always-multiline&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;em&gt;Rubocop&lt;/em&gt; for Ruby:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;Style/TrailingCommaInArrayLiteral&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;EnforcedStyleForMultiline&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;comma&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;Style/TrailingCommaInHashLiteral&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;EnforcedStyleForMultiline&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;comma&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An example &lt;code class=&quot;highlighter-rouge&quot;&gt;Guardfile&lt;/code&gt; configuration:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Run Rubocop every time we change a file, and autofix it if possible.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rubocop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all_on_start: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;cli: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;other-benefits-&quot;&gt;Other Benefits üë©‚Äçüíªüë®‚Äçüíª&lt;/h3&gt;

&lt;p&gt;Reordering lines, or sorting them alphabetically with the help of an editor
(like &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;&lt;em&gt;Sublime Text&lt;/em&gt;&lt;/a&gt;), will always result in valid code,
without the need to manually add the missing comma to avoid a syntax error.&lt;/p&gt;

&lt;p&gt;Also, conflicts in &lt;a href=&quot;https://git-scm.com/&quot;&gt;source control&lt;/a&gt; are less likely to happen,
since each line change becomes independent, unlike the usual approach where we
are actually removing the last line without a comma to add two lines.&lt;/p&gt;

&lt;p&gt;Finally, tools like &lt;a href=&quot;https://git-scm.com/docs/git-blame&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt;&lt;/a&gt; are more likely to display relevant commit
information, rather than the commit that added the comma.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Using trailing commas in multi-line literals results in code that is
syntactically more stable to changes, and keeps a cleaner history in source control.&lt;/p&gt;

&lt;p&gt;Developers make less syntax errors, since they can add and remove items, sort or
reorder them, without having to manage missing (or extra) trailing commas.&lt;/p&gt;

&lt;p&gt;We‚Äôve been using this approach for years now, and haven‚Äôt run into any issues in
practice. It‚Äôs been great so far üòÉ&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/trailing-commas.jpg" />
    <author>
      <name>M√°ximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
  </entry>

  <entry>
    <title>Better Settings in Ruby apps</title>
    <link href="http://maximomussini.com/posts/better-settings/" rel="alternate" type="text/html" title="Better Settings in Ruby apps" />
    <published>2019-03-02T13:32:00-03:00</published>
  
    <updated>2019-03-02T13:32:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/better-settings</id>
    <content type="html" xml:base="http://maximomussini.com/posts/better-settings/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/better-settings.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/ElMassimo/better_settings&quot;&gt;&lt;em&gt;BetterSettings&lt;/em&gt;&lt;/a&gt; is a settings-management library for Ruby apps, which was
designed in response to certain issues we faced when using &lt;a href=&quot;https://github.com/hashrocket/settingslogic&quot;&gt;&lt;em&gt;settingslogic&lt;/em&gt;&lt;/a&gt;
(one of the most popular libraries to manage settings in Rails applications).&lt;/p&gt;

&lt;p&gt;In this post we‚Äôll talk about &lt;em&gt;settingslogic&lt;/em&gt; and its design decisions, how they
affect reliability, and how we can overcome them.&lt;/p&gt;

&lt;p&gt;Even if you are not familiar with these libraries, reading this article might
help you to learn about potentially harmful practices, and how to avoid them in
your own code.&lt;/p&gt;

&lt;h2 id=&quot;settingslogic&quot;&gt;Settingslogic&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Settingslogic&lt;/em&gt; can read a &lt;em&gt;.yml&lt;/em&gt; file and turn it into a Ruby object, which
provides access to settings by indexing it as a Hash, or by using method calls.&lt;/p&gt;

&lt;h3 id=&quot;settings-can-be-modified&quot;&gt;Settings can be modified&lt;/h3&gt;
&lt;p&gt;The library aims to be flexible, by allowing to create a setting that is not
present in the file or modify an existing one, by using:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'property'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although it might seem like a good idea, this behavior introduces uncertainty
about whether a setting will be available or not when accessing it, and the
value it might have, since that depends on the execution order of the program.&lt;/p&gt;

&lt;p&gt;Because the library is not thread-safe, modifying settings makes them suceptible
to race conditions in multi-threaded apps or multi-threaded app containers.&lt;/p&gt;

&lt;h3 id=&quot;values-are-mutable&quot;&gt;Values are mutable&lt;/h3&gt;
&lt;p&gt;Even when not creating or modifying a setting at runtime, the values read from
the &lt;em&gt;.yml&lt;/em&gt; file can be accidentally modified since the settings are not frozen
(specially &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; values).&lt;/p&gt;

&lt;p&gt;For example, when working with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; setting, calling &lt;code class=&quot;highlighter-rouge&quot;&gt;merge!&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; causes the setting to be changed on every subsequent access, which can
have unpredictable consequences in the application.&lt;/p&gt;

&lt;p&gt;These accidental mutations are usually very hard to detect, and can cause bugs
that are difficult to replicate and track down.&lt;/p&gt;

&lt;p&gt;Writing code carefully to avoid mutating the data structures is not enough,
since we have no guarantee that third-party libraries will be as careful. To
solve this we would need to always clone settings before handing them over,
which is cumbersome and error-prone.&lt;/p&gt;

&lt;h3 id=&quot;limited-to-a-single-file&quot;&gt;Limited to a single file&lt;/h3&gt;
&lt;p&gt;Only one &lt;em&gt;.yml&lt;/em&gt; file can be specified, so there‚Äôs no way to read configuration
from multiple files. Because settings are necessary to run the application, it‚Äôs
important that the file is versioned under source control.&lt;/p&gt;

&lt;p&gt;In our case, this meant that when developers changed a setting based on their
local setup, or to perform a manual test, they had to manually skip it when
making a commit.&lt;/p&gt;

&lt;p&gt;As a result, many times a developer would accidentally push these changes that
should not be merged upstream, and we had to be on the lookout during code
reviews to prevent unwanted changes.&lt;/p&gt;

&lt;h3 id=&quot;error-prone-design&quot;&gt;Error-prone design&lt;/h3&gt;
&lt;p&gt;These problems we experienced with &lt;em&gt;settingslogic&lt;/em&gt;, related with reliability and
collaboration, are a consequence of the design decisions in the library.&lt;/p&gt;

&lt;p&gt;The library defaults are troublesome, such as deferring the load of the &lt;em&gt;.yml&lt;/em&gt;
file until the settings are accessed, making it possible for an app to start
successfully and fail later at runtime.&lt;/p&gt;

&lt;p&gt;In the end, it has the same disadvantages of simpler approaches, like using a
plain &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenStruct&lt;/code&gt; to manage settings.&lt;/p&gt;

&lt;h2 id=&quot;a-better-way&quot;&gt;A &lt;em&gt;Better&lt;/em&gt; Way&lt;/h2&gt;
&lt;p&gt;With that in mind, we decided to design a new solution from scratch, that could
handle these shortcomings, and actively prevent bugs and misusage.&lt;/p&gt;

&lt;p&gt;The result is &lt;a href=&quot;https://github.com/ElMassimo/better_settings&quot;&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BetterSettings&lt;/code&gt;&lt;/em&gt;&lt;/a&gt;, designed after the following concerns:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Predictability&lt;/strong&gt;: Once created, settings can not be added or modified, which
prevents race conditions and makes usage safe and predictable.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Immutability&lt;/strong&gt;: All setting values are frozen, preventing an entire category
of bugs related to accidental mutation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Multiple sources&lt;/strong&gt;: Settings can be read from different files. This allows
to split settings as needed, or create additional files for development purposes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Better errors&lt;/strong&gt;: Accessing a missing setting is treated as an error, helping
developers to easily detect typos and other mistakes with a clear error message.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fail-fast&lt;/strong&gt;: Source files should be eager loaded by default, so that
problems in the environment are detected during deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The setup for the &lt;em&gt;.yml&lt;/em&gt; file is very similar to &lt;em&gt;settingslogic&lt;/em&gt;, you can find
more information and examples in the &lt;a href=&quot;https://github.com/ElMassimo/better_settings&quot;&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h3&gt;
&lt;p&gt;Internally, settings are stored in a frozen &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt;, which is an instance
variable in the &lt;code class=&quot;highlighter-rouge&quot;&gt;BetterSettings&lt;/code&gt; object. We delegate &lt;code class=&quot;highlighter-rouge&quot;&gt;to_h&lt;/code&gt; to this internal
hash for easy access, but other than that, we don‚Äôt expose any &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;We go through every hash &lt;em&gt;entry&lt;/em&gt;, processing any nested &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; objects,
freezing every wrapped &lt;em&gt;value&lt;/em&gt;, setting it in an instance variable, and making it
accessible by defining a getter for that &lt;em&gt;key&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It‚Äôs worth noting that we wrap nested &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; values in instances of your
&lt;code class=&quot;highlighter-rouge&quot;&gt;BetterSettings&lt;/code&gt; class, which will recursively repeat the process.&lt;/p&gt;

&lt;p&gt;As a result, the entire settings graph is readable but immutable, and each
nested object exposes getters for the available keys.&lt;/p&gt;

&lt;p&gt;To make errors a bit friendlier, we implement &lt;code class=&quot;highlighter-rouge&quot;&gt;method_missing&lt;/code&gt; to provide
context on where a setting is missing, instead of an unhelpful &lt;code class=&quot;highlighter-rouge&quot;&gt;NoMethodError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we sprinkle some syntax sugar by making every top-level key available
as a method in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings&lt;/code&gt; class, by delegating it to a &lt;code class=&quot;highlighter-rouge&quot;&gt;root_settings&lt;/code&gt;
instance that is populated when calling &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; in the class.&lt;/p&gt;

&lt;h3 id=&quot;reading-from-multiple-files-&quot;&gt;Reading from multiple files ‚öô&lt;/h3&gt;
&lt;p&gt;Not being limited to a single source file opens up the possiblities.&lt;/p&gt;

&lt;p&gt;We usually read two optional files: &lt;code class=&quot;highlighter-rouge&quot;&gt;development.yml&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;test.yml&lt;/code&gt; that are
loaded in the &lt;em&gt;development&lt;/em&gt; and &lt;em&gt;test&lt;/em&gt; environments respectively, allowing each
developer to easily override settings in their local setup.&lt;/p&gt;

&lt;p&gt;In a Rails app with the typical setup, the configuration looks like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BetterSettings&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'config/application.yml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;namespace: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;development?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'config/development.yml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;namespace: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;optional: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'config/test.yml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;namespace: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;optional: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Having a &lt;code class=&quot;highlighter-rouge&quot;&gt;development.yml&lt;/code&gt; file comes in handy when making changes that should
not be shared, such as a temporary change to test a different configuration, or
a permanent one that is only relevant in a specific local setup (such as
different host names or port numbers).&lt;/p&gt;

&lt;p&gt;This could also be achieved by reading environment variables (&lt;a href=&quot;#environment-variables&quot;&gt;see the next
section&lt;/a&gt;), but for development using an optional file is
more convenient, as it‚Äôs located in the same folder than the main one, and
settings can be copied and tweaked.&lt;/p&gt;

&lt;p&gt;On the other hand, &lt;code class=&quot;highlighter-rouge&quot;&gt;test.yml&lt;/code&gt; makes it possible to configure tests to run with a
different formatter for the results, or configure optional behavior, like
automatically opening the screenshots that are captured when integration tests
fail.&lt;/p&gt;

&lt;p&gt;This flexibility enables us to provide awesome defaults, while still allowing
everyone to modify the configuration according to their personal preference or
local setup, without having to worry about pushing those changes by accident.&lt;/p&gt;

&lt;h3 id=&quot;environment-variables&quot;&gt;Environment Variables&lt;/h3&gt;
&lt;p&gt;In server environments, such as &lt;em&gt;staging&lt;/em&gt; and &lt;em&gt;production&lt;/em&gt;, we use environment
variables for any sensitive information, such as passwords.&lt;/p&gt;

&lt;p&gt;In order to ensure that missing environment variables are quickly detected, we
use this simple helper:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Env&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Public: Read an environment variable by name.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# NOTE: Defaults are only used in the development and test environments.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;development?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test?&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then in &lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;mailer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;%= Env.require('MAILER_PORT', 587) %&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using this helper, we can be very &lt;em&gt;strict on servers&lt;/em&gt;Ôºçwhere we need
everything to be configured (such as hosts, ports, and third-party integrations)Ôºçand
&lt;em&gt;lenient in development&lt;/em&gt;Ôºçwhere we can just provide a default value and then
override it by using &lt;code class=&quot;highlighter-rouge&quot;&gt;development.yml&lt;/code&gt; if necessary.&lt;/p&gt;

&lt;p&gt;We prefer this pattern over using &lt;code class=&quot;highlighter-rouge&quot;&gt;ENV.fetch&lt;/code&gt; with a default value as a
fallback, since that would cover up a missing environment variable in the servers.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;So there you have it, &lt;a href=&quot;https://github.com/ElMassimo/better_settings&quot;&gt;&lt;em&gt;BetterSettings&lt;/em&gt;&lt;/a&gt; is a settings solution
for Ruby apps that encourages good practices, is friendlier for team
collaboration and source-control, and prevents bugs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ElMassimo/better_settings&quot;&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BetterSettings&lt;/code&gt;&lt;/em&gt;&lt;/a&gt;: simple, immutable, better.&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/better-settings.jpg" />
    <author>
      <name>M√°ximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
  </entry>

  <entry>
    <title>i18n Multitenancy: Customer-Specific Translations</title>
    <link href="http://maximomussini.com/posts/i18n-multitenant/" rel="alternate" type="text/html" title="i18n Multitenancy: Customer-Specific Translations" />
    <published>2017-01-26T00:00:00-03:00</published>
  
    <updated>2017-01-26T00:00:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/i18n-multitenant</id>
    <content type="html" xml:base="http://maximomussini.com/posts/i18n-multitenant/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/i18n-multitenant.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;When providing services to different companies or customers with the same
software, such as enterprise or white-label applications, it‚Äôs not unusual that
each customer uses different terminology for certain concepts within the application.&lt;/p&gt;

&lt;p&gt;While they might be similar in terms of operations and transactions, different
domains will often use different jargon, and as a result, prefer different names
for a given feature or aspect of an application.&lt;/p&gt;

&lt;p&gt;For example, a concept that in our application is &lt;em&gt;‚Äúperson‚Äù&lt;/em&gt;, might be referred to
as &lt;em&gt;‚Äúuser‚Äù&lt;/em&gt;, &lt;em&gt;‚Äúcustomer‚Äù&lt;/em&gt;, or &lt;em&gt;‚Äúemployee‚Äù&lt;/em&gt;, based on the language of their specific
domain, or when using their &lt;em&gt;in-house&lt;/em&gt; terminology.&lt;/p&gt;

&lt;p&gt;Using the same terms than our users in their every day routine can help to make
the software feel more natural and easier to grasp, lowering the adoption
barrier and reducing the resistance to change in large organizations.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚Ä¶fits right in with our usual flow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;using-i18n-fallbacks-&quot;&gt;Using i18n fallbacks üåé&lt;/h3&gt;

&lt;p&gt;Fortunately, we can easily accomplish this by leveraging the existing i18n tools
that are available in most platforms.&lt;/p&gt;

&lt;p&gt;Just like we might allow a customer to switch between American or British
variants of the English language (&lt;code class=&quot;highlighter-rouge&quot;&gt;en-US&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;en-UK&lt;/code&gt;), we can create additional
language-variants or locales for each customer or domain (&lt;code class=&quot;highlighter-rouge&quot;&gt;en-LAW&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;en-LAW&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;client&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can then use i18n fallbacks, so that any keys that are not defined in our
domain-specific locale &lt;em&gt;fall back&lt;/em&gt; to the usual definition in the language.&lt;/p&gt;

&lt;p&gt;In the example above, any users that have the &lt;code class=&quot;highlighter-rouge&quot;&gt;LAW&lt;/code&gt; translation preset assigned
would see &lt;em&gt;‚Äúclient‚Äù&lt;/em&gt;, but other users might see &lt;em&gt;‚Äúcustomer‚Äù&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This allows us to achieve a nice balance between configurability and productivity.&lt;/p&gt;

&lt;p&gt;By managing these text overrides within the translation engine, it becomes
almost effortless to dynamically customize the language used in the app.&lt;/p&gt;

&lt;p&gt;Dictionaries for different domains or specific customers can be added with ease,
and it becomes easier to test all the different combinations in the application.&lt;/p&gt;

&lt;h3 id=&quot;a-solution-for-ruby-apps-&quot;&gt;A solution for Ruby apps üíé&lt;/h3&gt;

&lt;p&gt;I have wrapped a Ruby solution as the &lt;a href=&quot;https://github.com/ElMassimo/i18n_multitenant&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i18n_multitenant&lt;/code&gt;&lt;/a&gt; gem.
Please &lt;a href=&quot;https://github.com/ElMassimo/i18n_multitenant&quot;&gt;check the readme&lt;/a&gt; for a more thorough explanation of
how language variants are used, and a few examples on how to organize
translations in order to effectively implement the approach.&lt;/p&gt;

&lt;h4 id=&quot;what-about-translations-in-the-browser&quot;&gt;What about translations in the browser?&lt;/h4&gt;

&lt;p&gt;For single-page applications or other apps where it‚Äôs desirable to perform the
translations in the browser, we can use a library such as &lt;a href=&quot;https://github.com/fnando/i18n-js&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i18n-js&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It‚Äôs possible to &lt;a href=&quot;https://github.com/ElMassimo/i18n_multitenant#front-end_translations&quot;&gt;configure it to use fallbacks&lt;/a&gt;,
allowing us to reuse the same translation files in the JS world.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i18n&lt;/code&gt; fallbacks provide a simple way to adapt the terminology used in our
software based on different domains and users needs, making it &lt;em&gt;feel more familiar&lt;/em&gt;
and easier to use &lt;em&gt;without restricting the software‚Äôs flexibility&lt;/em&gt;.&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/i18n-multitenant.jpg" />
    <author>
      <name>M√°ximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
  </entry>

  <entry>
    <title>Aggregation DSL in Mongoid</title>
    <link href="http://maximomussini.com/posts/mongoid-aggregation-dsl/" rel="alternate" type="text/html" title="Aggregation DSL in Mongoid" />
    <published>2016-06-30T16:19:00-03:00</published>
  
    <updated>2016-06-30T16:19:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/mongoid-aggregation-dsl</id>
    <content type="html" xml:base="http://maximomussini.com/posts/mongoid-aggregation-dsl/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/mongoid-aggregation-dsl.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;&lt;em&gt;Mongoid&lt;/em&gt; provides support for &lt;a href=&quot;https://docs.mongodb.com/manual/core/aggregation-pipeline/&quot;&gt;&lt;em&gt;MongoDB‚Äôs Aggregation Framework&lt;/em&gt;&lt;/a&gt;, but writing raw queries can be confusing and is extremely verbose:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$match'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'country'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'US'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$project'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'categories'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'price'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$unwind'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$category_ids'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'$group'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'_id'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$category_ids'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'avg_price'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$avg'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$price'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$sort'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'avg_price'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$limit'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Turns out &lt;a href=&quot;https://github.com/mongoid/origin&quot;&gt;&lt;em&gt;Origin&lt;/em&gt;&lt;/a&gt;‚Äîthe gem that powers &lt;em&gt;Mongoid‚Äôs&lt;/em&gt; query DSL‚Äîalready provides methods for each aggregation operation. The only problem is that it doesn‚Äôt provide a way to execute the aggregation, and there‚Äôs no documentation about it :grimacing:&lt;/p&gt;

&lt;p&gt;Every aggregation method call adds an operation to an internal pipeline, which we can manually retrieve by calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;pipeline&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;country: :US&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;categories: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;price: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;unwind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$category_ids'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;_id: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$category_ids'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:avg_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:avg_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pipeline&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# {&quot;$match&quot;=&amp;gt;{&quot;country&quot;=&amp;gt;:US}}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# {&quot;$project&quot;=&amp;gt;{&quot;categories&quot;=&amp;gt;1, &quot;price&quot;=&amp;gt;1}}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# {&quot;$unwind&quot;=&amp;gt;&quot;$category_ids&quot;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# {&quot;$group&quot;=&amp;gt;{&quot;_id&quot;=&amp;gt;&quot;$category_ids&quot;, &quot;avg_price&quot;=&amp;gt;{&quot;$avg&quot;=&amp;gt;&quot;$price&quot;}}}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# {&quot;$sort&quot;=&amp;gt;{&quot;avg_price&quot;=&amp;gt;-1}}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# {&quot;$limit&quot;=&amp;gt;30}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice how using the DSL we obtain the same aggregation pipeline that we have in the first example, except it‚Äôs way more concise, and we are able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; extensions like &lt;code class=&quot;highlighter-rouge&quot;&gt;avg&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;max&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;add_to_set&lt;/code&gt;, which add a great deal of expressiveness and make our queries more concise.&lt;/p&gt;

&lt;p&gt;Now all we have to do is pass the pipeline to the &lt;code class=&quot;highlighter-rouge&quot;&gt;aggregate&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pipeline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can add a little syntax sugar using refinements and make it even more convenient:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AggregationRefinements&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;refine&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mongoid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Criteria&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AggregationRefinements&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;categories: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;price: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;unwind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$category_ids'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;_id: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$category_ids'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:avg_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or if you are using &lt;a href=&quot;https://github.com/ElMassimo/queryable&quot;&gt;&lt;strong&gt;query objects&lt;/strong&gt;&lt;/a&gt;, it‚Äôs as simple as adding a method to the objects where you need to perform aggregations:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;queryable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can enjoy &lt;em&gt;Mongoid‚Äôs&lt;/em&gt; fluent DSL for aggregations :smiley:&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/mongoid-aggregation-dsl.jpg" />
    <author>
      <name>M√°ximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
  </entry>

  <entry>
    <title>Class Instance Variables in Ruby</title>
    <link href="http://maximomussini.com/posts/ruby-class-variables/" rel="alternate" type="text/html" title="Class Instance Variables in Ruby" />
    <published>2016-05-30T21:10:00-03:00</published>
  
    <updated>2016-05-30T21:10:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/ruby-class-variables</id>
    <content type="html" xml:base="http://maximomussini.com/posts/ruby-class-variables/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/ruby-class-variables.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;Like most object-oriented languages, Ruby has both instance and class variables. The syntax is &lt;code class=&quot;highlighter-rouge&quot;&gt;@name&lt;/code&gt; for &lt;em&gt;instance variables&lt;/em&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;@@name&lt;/code&gt; for &lt;em&gt;class variables&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at a simple example to understand how we might use &lt;em&gt;class variables&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
    &lt;span class=&quot;vc&quot;&gt;@@animals&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;other_species&lt;/span&gt;
    &lt;span class=&quot;vc&quot;&gt;@@animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [Dog, Cat]&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;other_species&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [Dog]&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;other_species&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [Cat]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;@@animals&lt;/code&gt; &lt;em&gt;class variable&lt;/em&gt; is &lt;strong&gt;shared&lt;/strong&gt; among subclasses, and we can refer to it by using the same syntax from both class and instance methods.&lt;/p&gt;

&lt;h3 id=&quot;limitations-of-class-variables&quot;&gt;Limitations of Class Variables&lt;/h3&gt;
&lt;p&gt;Now, what happens if we wanted to do something different, like storing metadata or configuration in each subclass?&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'?'&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;
    &lt;span class=&quot;vc&quot;&gt;@@sound&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'woof!'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'meow!'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &quot;meow!&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &quot;meow!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because &lt;em&gt;class variables&lt;/em&gt; are shared between the parent class and its subclasses, the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;@@sound&lt;/code&gt; gets stepped over by the last subclass, rather than it taking a different value for each subclass as intended.&lt;/p&gt;

&lt;h2 id=&quot;class-instance-variables&quot;&gt;Class Instance Variables&lt;/h2&gt;
&lt;p&gt;Fortunately, there‚Äôs a simple way to achieve this in Ruby:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sound&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@sound&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sound&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'woof!'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'meow!'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 'woof!'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 'meow!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using instance variables, each subclass gets its own variable so &lt;code class=&quot;highlighter-rouge&quot;&gt;@sound&lt;/code&gt; does not get stepped over, and each subclass can configure the variable as needed. So, &lt;em&gt;how does it work&lt;/em&gt;?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Classes in Ruby are plain objects, instances of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Class&lt;/code&gt; class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let that sink in for a bit :smile:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Because each class is an object, it can have instance variables just like any other Ruby object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although they are often called &lt;em&gt;class instance variables&lt;/em&gt; to differentiate them from actual &lt;em&gt;class variables&lt;/em&gt;, there‚Äôs nothing special about them‚Äîthey are just plain ole‚Äô instance variables.&lt;/p&gt;

&lt;p&gt;The key practical difference is that &lt;em&gt;class variables&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;@@&lt;/code&gt;) are shared among a class and all of its descendants, whereas &lt;em&gt;class instance variables&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;) are not shared and each class has separate instance variables just like you would expect from different objects.&lt;/p&gt;

&lt;h3 id=&quot;limitations-of-class-instance-variables&quot;&gt;Limitations of Class Instance Variables&lt;/h3&gt;
&lt;p&gt;It‚Äôs worth noting that in the last example we lost the convenience of referencing the &lt;code class=&quot;highlighter-rouge&quot;&gt;@sound&lt;/code&gt; variable directly on the &lt;code class=&quot;highlighter-rouge&quot;&gt;talk&lt;/code&gt; method like we did in the &lt;a href=&quot;#limitations-of-class-variables&quot;&gt;second example&lt;/a&gt;, and instead need to define a getter method at the class level in order to access it.&lt;/p&gt;

&lt;p&gt;This is because the same syntax is used for regular &lt;em&gt;instance variables&lt;/em&gt;, so we can only refer to class instance variables directly when we are in the class scope‚Äîlike in &lt;strong&gt;class methods&lt;/strong&gt; and in the &lt;strong&gt;top-level context&lt;/strong&gt; of a class definition.&lt;/p&gt;

&lt;p&gt;Also, since we can‚Äôt use &lt;em&gt;class instance variables&lt;/em&gt; to share values between a class and its descendants, in cases where we would like to access the variable of a parent class we will need to refer to it using a fully qualified getter (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal.sound&lt;/code&gt;) or use &lt;a href=&quot;https://github.com/ElMassimo/queryable/blob/7c5eb3448456e6e84a907cbf4a567c576433428a/lib/queryable/default_scope.rb#L38-L50&quot;&gt;metaprogramming&lt;/a&gt; in order to achieve that.&lt;/p&gt;

&lt;h2 id=&quot;driving-it-home-house-car&quot;&gt;Driving it home :house: :car:&lt;/h2&gt;
&lt;p&gt;In general, &lt;em&gt;class instance variables&lt;/em&gt; are the way to go because they are not shared, which is very useful when building libraries or DSLs, and we don‚Äôt run the risk of the value getting stepped over by accident in a subclass.&lt;/p&gt;

&lt;p&gt;On the other hand, when the variable must be shared by a class and its descendants we should always use &lt;em&gt;class variables&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When inheritance is not in play we can use either, but it‚Äôs better to be consistent and pick a ‚Äúdefault‚Äù. I always use &lt;em&gt;class instance variables&lt;/em&gt; unless I actually need the variable to be shared.&lt;/p&gt;

&lt;p&gt;We should now be less fuzzy on what &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; means when used in class methods or in a class definition, and when to use &lt;em&gt;class instance variables&lt;/em&gt; instead of &lt;em&gt;class variables&lt;/em&gt; :smiley:&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/ruby-class-variables.jpg" />
    <author>
      <name>M√°ximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
  </entry>

  <entry>
    <title>Optimizing AngularJS performance with events</title>
    <link href="http://maximomussini.com/posts/angular-less-watchers/" rel="alternate" type="text/html" title="Optimizing AngularJS performance with events" />
    <published>2016-04-15T20:38:00-03:00</published>
  
    <updated>2016-04-15T20:38:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/angular-less-watchers</id>
    <content type="html" xml:base="http://maximomussini.com/posts/angular-less-watchers/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/angular-less-watchers.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;Like we saw in the &lt;a href=&quot;/posts/angular-intro/&quot;&gt;previous post&lt;/a&gt;, &lt;em&gt;AngularJS&lt;/em&gt; uses watchers to detect changes, allowing it to update views as needed. &lt;em&gt;Angular&lt;/em&gt; will create a watcher for every expression that we add to our templates using data-bindings, &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-repeat&lt;/code&gt;, or similar directives.&lt;/p&gt;

&lt;p&gt;As we learned, each time a watcher is created &lt;em&gt;Angular&lt;/em&gt; will add the expression to a &lt;a href=&quot;/posts/angular-intro/#the-watch-list-and-dirty-checking&quot;&gt;&lt;em&gt;watch list&lt;/em&gt;&lt;/a&gt;, which is then iterated during each digest cycle to evaluate every expression and detect changes. That means, the more watchers are registered, the more &lt;em&gt;Angular&lt;/em&gt; has to process during &lt;a href=&quot;/posts/angular-intro/#repeat-the-digest-cycle&quot;&gt;the digest cycle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In pages that have many components‚Äîsuch as long lists and grids‚Äîthe amount of watchers can be very high, which can negatively affect the performance of our app and make it feel unresponsive.&lt;/p&gt;

&lt;p&gt;In this post we will take a look at two techniques that can help us mitigate this problem and speed up our applications.&lt;/p&gt;

&lt;h2 id=&quot;one-time-bindings&quot;&gt;One-Time Bindings&lt;/h2&gt;
&lt;p&gt;One of the most convenient techniques that we have to reduce the amount of watchers is the use of &lt;em&gt;one-time bindings&lt;/em&gt;. Any expression that starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;::&lt;/code&gt; is considered a &lt;em&gt;one-time expression&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user in ::users&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ ::user.name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Angular&lt;/em&gt; will remove a &lt;em&gt;one-time expression&lt;/em&gt; from the watch list once it has been &lt;a href=&quot;https://docs.angularjs.org/guide/expression#value-stabilization-algorithm&quot;&gt;resolved&lt;/a&gt;, unlike normal expressions which are evaluated on every digest cycle.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the expression will not change once set, it is a candidate for one-time binding. For example, internationalization :uk: :es:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a result, we have less expressions being watched, which makes the digest loop faster, increases the responsiveness of the app, and allows more information to be displayed at the same time.&lt;/p&gt;

&lt;p&gt;Using one-time bindings is an easy and effective way to reduce the amount of watchers, but there‚Äôs a catch. &lt;em&gt;Angular&lt;/em&gt; won‚Äôt detect changes on each digest cycle and update the view, which makes them only suitable for values that won‚Äôt change.&lt;/p&gt;

&lt;h2 id=&quot;recompiling-with-events&quot;&gt;Recompiling with Events&lt;/h2&gt;
&lt;p&gt;What about expressions with a value that might change, yet remain the same most of the time? It‚Äôs a waste to evaluate them on every digest cycle, but we can‚Äôt just use one-time expressions since the value might eventually change.&lt;/p&gt;

&lt;p&gt;A technique that I have been using in pages where performance is critical is &lt;em&gt;event-driven recompilation&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;recompile-on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user:changed&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ ::user.name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This technique has three key aspects: one-time expressions, compilation, and event propagation. Let‚Äôs see how the &lt;code class=&quot;highlighter-rouge&quot;&gt;recompileOn&lt;/code&gt; directive could be written:&lt;/p&gt;

&lt;div class=&quot;language-coffeescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Public: Recompiles an element if an event occurs.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# NOTE: Do not use in combination with ng-if or ng-repeat, unless a one-time&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# binding is used in the expression.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;directive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'recompileOn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restrict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outerHTML&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Internal: Will trigger a recompilation if the event is triggered.&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;recompileOnEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eventName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Remove the previously added listener, if any.&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;removeListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# Replace the element after the digest loop that triggered the event has ended.&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$evalAsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;newEl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

              &lt;span class=&quot;c1&quot;&gt;# Destroy the old scope, since a new one was created by using compile.&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;removeListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;recompileOnEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recompileOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The directive will listen for a particular event on the current &lt;em&gt;scope&lt;/em&gt;, and force a recompilation of the element when the event is triggered. This means that every directive inside the element will be processed from scratch, including our &lt;em&gt;one-time expressions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Events can be triggered as usual:&lt;/p&gt;

&lt;div class=&quot;language-coffeescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$broadcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'user:changed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;One-time bindings provide a very efficient way to render dynamic values once without taking up watchers, while &lt;code class=&quot;highlighter-rouge&quot;&gt;$on&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$compile&lt;/code&gt; provide a helpful way to render from scratch when we need to. This combination works very well for complex pages where the amount of watchers is taking a toll on performance.&lt;/p&gt;

&lt;p&gt;There are many variations that we can introduce to the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;recompileOn&lt;/code&gt;, such as allowing to pass several event names, or checking the event arguments for a specific value, such as an id. We can take this idea as far as we want to :rocket:&lt;/p&gt;

&lt;p&gt;As with any optimization, it‚Äôs important to consider whether the performance improvement justifies the additional complexity. Use it wisely!&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/angular-less-watchers.jpg" />
    <author>
      <name>M√°ximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
    <summary>In this post we take a look at effective ways to reduce the amount of watchers in our _AngularJS_ application and improve the performance of our app.</summary>
  
  </entry>

  <entry>
    <title>AngularJS: Watchers and the Digest Cycle</title>
    <link href="http://maximomussini.com/posts/angular-intro/" rel="alternate" type="text/html" title="AngularJS: Watchers and the Digest Cycle" />
    <published>2016-03-29T22:29:00-03:00</published>
  
    <updated>2016-03-29T22:29:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/angular-intro</id>
    <content type="html" xml:base="http://maximomussini.com/posts/angular-intro/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/angular-intro.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;&lt;em&gt;AngularJS&lt;/em&gt; might not be hip anymore, but it‚Äôs still a useful framework to create interactive web apps. In this post we will take a brief tour through &lt;em&gt;Angular&lt;/em&gt;‚Äôs internals: watchers and the digest cycle.&lt;/p&gt;

&lt;h2 id=&quot;bindings-and-watchers&quot;&gt;Bindings and Watchers&lt;/h2&gt;
&lt;p&gt;One of the most useful features in &lt;em&gt;AngularJS&lt;/em&gt; are data-bindings, which allow us to bind a model or property to a view; whenever the model changes, the view is updated automatically.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user.name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ user.name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How does that work? When you write an expression like &lt;code class=&quot;highlighter-rouge&quot;&gt;{{ user.name }}&lt;/code&gt;, &lt;em&gt;Angular&lt;/em&gt; creates a &lt;em&gt;watcher&lt;/em&gt; that observes the &lt;code class=&quot;highlighter-rouge&quot;&gt;user.name&lt;/code&gt; property, which will be triggered whenever the model changes, allowing &lt;em&gt;Angular&lt;/em&gt; to update the view content.&lt;/p&gt;

&lt;p&gt;We can also create watchers manually and execute arbitrary code when the model changes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user.name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user.name changed from'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'to'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first argument passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;$watch&lt;/code&gt; is known as the &lt;em&gt;model&lt;/em&gt;, and the second argument is the &lt;em&gt;listener&lt;/em&gt; function, which is called whenever the model (or more precisely, value of the watched expression) changes.&lt;/p&gt;

&lt;p&gt;Now that we know what watchers can do for us, let‚Äôs dig a bit deeper and learn how they work. How does &lt;em&gt;Angular&lt;/em&gt; figure out when &lt;code class=&quot;highlighter-rouge&quot;&gt;user.name&lt;/code&gt; changed in order to call the &lt;em&gt;listener&lt;/em&gt;?&lt;/p&gt;

&lt;h2 id=&quot;the-watch-list-and-dirty-checking&quot;&gt;The Watch List and Dirty Checking&lt;/h2&gt;

&lt;p&gt;Each time a watcher is created, &lt;em&gt;Angular&lt;/em&gt; adds the expression to a &lt;em&gt;watch list&lt;/em&gt; to track changes. &lt;em&gt;Angular&lt;/em&gt; will walk down the watch list from time to time and resolve each watcher through a process called &lt;em&gt;dirty checking&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keep the last value for each watched expression.&lt;/li&gt;
  &lt;li&gt;Evaluate the expression: if the value is the same than the last one continue down the watch list.&lt;/li&gt;
  &lt;li&gt;If the value is different the expression is &lt;strong&gt;dirty&lt;/strong&gt;, so propagate the change by calling each &lt;em&gt;listener&lt;/em&gt; with the old and the new value.&lt;/li&gt;
  &lt;li&gt;Once the change has been synchronized across the app, replace the last value with the new value.&lt;/li&gt;
  &lt;li&gt;Continue to the next expression in the watch list.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;For every UI element that is bound to a $scope object, a watch is created and added to the &lt;em&gt;watch list&lt;/em&gt;, which is checked on every digest loop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;repeat-the-digest-cycle&quot;&gt;:repeat: The Digest Cycle&lt;/h2&gt;
&lt;p&gt;And it‚Äôs in the &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$digest&lt;/code&gt;&lt;/a&gt; cycle where every watcher in the watch list is evaluated, and the changes propagated to the &lt;em&gt;listeners&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This cycle starts as a result of a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.$digest()&lt;/code&gt;, which often happens as a result of an action performed by the user. For example, clicking an element with the &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-click&lt;/code&gt; directive will explicitly call &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.$digest()&lt;/code&gt; and start the loop.&lt;/p&gt;

&lt;p&gt;Once the cycle starts, it will go through the &lt;em&gt;watch list&lt;/em&gt;, propagating changes to &lt;em&gt;listeners&lt;/em&gt; as needed.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are many &lt;em&gt;Angular&lt;/em&gt; directives and services that will automatically trigger a digest cycle, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-model&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$timeout&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;crown-keep-calm-and-digest&quot;&gt;:crown: Keep Calm and Digest&lt;/h2&gt;
&lt;p&gt;Once &lt;em&gt;Angular&lt;/em&gt; has run through the entire watch list, if any value changed, it will start a new digest cycle until no model is changed and no watchers are triggered.&lt;/p&gt;

&lt;p&gt;Why does it run the loop all over again? Because any &lt;code class=&quot;highlighter-rouge&quot;&gt;$watch&lt;/code&gt; listener could change the value of an expression that was evaluated earlier in the digest loop, so &lt;em&gt;Angular&lt;/em&gt; wouldn‚Äôt be able to detect and propagate that change.&lt;/p&gt;

&lt;p&gt;Remember that &lt;em&gt;Angular&lt;/em&gt; uses dirty-checking as a way to determine if the watched expression changed, so the only way to guarantee all changes are propagated is to go through the &lt;em&gt;watch list&lt;/em&gt; again and check that no values were changed during the previous digest cycle.&lt;/p&gt;

&lt;p&gt;This means that the digest loop will run a minimum of two times, even when &lt;em&gt;listeners&lt;/em&gt; don‚Äôt change any models.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Minimize changes to watched models when inside listener functions, each change could trigger an extra digest loop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the loop runs ten times or more, &lt;em&gt;Angular&lt;/em&gt; will throw an exception to prevent a possible infinite loop, which would make the app unusable.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Because of the nature of &lt;em&gt;Angular&lt;/em&gt;‚Äôs internals, it‚Äôs very important to minimize the amount of watchers in order to keep the digest cycle fast.&lt;/p&gt;

&lt;p&gt;At the same time, it‚Äôs important to ensure that our application doesn‚Äôt trigger more digest cycles than necessary, since each loop requires evaluating every watcher in the list.&lt;/p&gt;

&lt;p&gt;While watchers are a very useful feature, the digest cycle implementation takes a brute force approach, which makes it almost magical at times, but is inefficient and can cause performance problems in complex applications.&lt;/p&gt;

&lt;p&gt;In the next post, we will take a look at some techniques that help to reduce the amount of watchers and improve the performance of our app. Stay tuned! :smiley:&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/angular-intro.jpg" />
    <author>
      <name>M√°ximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
    <summary>_AngularJS_ might not be hip anymore, but it's still a useful framework to create interactive web apps. In this post we will take a brief tour through _Angular_'s internals: watchers and the digest cycle.</summary>
  
  </entry>

</feed>
