<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.0.3">Jekyll</generator>
  <link href="http://maximomussini.com/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://maximomussini.com/" rel="alternate" type="text/html" />
  <updated>2017-06-19T19:39:31-03:00</updated>
  <id>http://maximomussini.com/</id>
  <title>Máximo Mussini</title>
  <subtitle>Thoughts about development and product design.</subtitle>
  <author>
    <name>Máximo Mussini</name>
    <email>maximomussini@gmail.com</email>
  </author>

  <entry>
    <title>Aggregation DSL in Mongoid</title>
    <link href="http://maximomussini.com/posts/mongoid-aggregation-dsl/" rel="alternate" type="text/html" title="Aggregation DSL in Mongoid" />
    <published>2016-06-30T16:19:00-03:00</published>
  
    <updated>2016-06-30T16:19:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/mongoid-aggregation-dsl</id>
    <content type="html" xml:base="http://maximomussini.com/posts/mongoid-aggregation-dsl/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/mongoid-aggregation-dsl.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;&lt;em&gt;Mongoid&lt;/em&gt; provides support for &lt;a href=&quot;https://docs.mongodb.com/manual/core/aggregation-pipeline/&quot;&gt;&lt;em&gt;MongoDB’s Aggregation Framework&lt;/em&gt;&lt;/a&gt;, but writing raw queries can be confusing and is extremely verbose:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$match&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;country&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;US&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$project&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;categories&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;price&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$unwind&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$category_ids&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&#39;$group&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&#39;_id&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$category_ids&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&#39;avg_price&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$avg&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$price&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$sort&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;avg_price&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$limit&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Turns out &lt;a href=&quot;https://github.com/mongoid/origin&quot;&gt;&lt;em&gt;Origin&lt;/em&gt;&lt;/a&gt;—the gem that powers &lt;em&gt;Mongoid’s&lt;/em&gt; query DSL—already provides methods for each aggregation operation. The only problem is that it doesn’t provide a way to execute the aggregation, and there’s no documentation about it :grimacing:&lt;/p&gt;

&lt;p&gt;Every aggregation method call adds an operation to an internal pipeline, which we can manually retrieve by calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;pipeline&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;country: :US&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;categories: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;price: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;unwind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;$category_ids&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;_id: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;$category_ids&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:avg_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$price&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:avg_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pipeline&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# {&quot;$match&quot;=&amp;gt;{&quot;country&quot;=&amp;gt;:US}}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# {&quot;$project&quot;=&amp;gt;{&quot;categories&quot;=&amp;gt;1, &quot;price&quot;=&amp;gt;1}}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# {&quot;$unwind&quot;=&amp;gt;&quot;$category_ids&quot;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# {&quot;$group&quot;=&amp;gt;{&quot;_id&quot;=&amp;gt;&quot;$category_ids&quot;, &quot;avg_price&quot;=&amp;gt;{&quot;$avg&quot;=&amp;gt;&quot;$price&quot;}}}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# {&quot;$sort&quot;=&amp;gt;{&quot;avg_price&quot;=&amp;gt;-1}}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# {&quot;$limit&quot;=&amp;gt;30}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice how using the DSL we obtain the same aggregation pipeline that we have in the first example, except it’s way more concise, and we are able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; extensions like &lt;code class=&quot;highlighter-rouge&quot;&gt;avg&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;max&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;add_to_set&lt;/code&gt;, which add a great deal of expressiveness and make our queries more concise.&lt;/p&gt;

&lt;p&gt;Now all we have to do is pass the pipeline to the &lt;code class=&quot;highlighter-rouge&quot;&gt;aggregate&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pipeline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can add a little syntax sugar using refinements and make it even more convenient:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AggregationRefinements&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;refine&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mongoid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Criteria&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AggregationRefinements&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;categories: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;price: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;unwind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;$category_ids&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;_id: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;$category_ids&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:avg_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$price&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or if you are using &lt;a href=&quot;https://github.com/ElMassimo/queryable&quot;&gt;&lt;strong&gt;query objects&lt;/strong&gt;&lt;/a&gt;, it’s as simple as adding a method to the objects where you need to perform aggregations:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;queryable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can enjoy &lt;em&gt;Mongoid’s&lt;/em&gt; fluent DSL for aggregations :smiley:&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/mongoid-aggregation-dsl.jpg" />
    <author>
      <name>Máximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
  </entry>

  <entry>
    <title>Class Instance Variables in Ruby</title>
    <link href="http://maximomussini.com/posts/ruby-class-variables/" rel="alternate" type="text/html" title="Class Instance Variables in Ruby" />
    <published>2016-05-30T21:10:00-03:00</published>
  
    <updated>2016-05-30T21:10:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/ruby-class-variables</id>
    <content type="html" xml:base="http://maximomussini.com/posts/ruby-class-variables/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/ruby-class-variables.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;Like most object-oriented languages, Ruby has both instance and class variables. The syntax is &lt;code class=&quot;highlighter-rouge&quot;&gt;@name&lt;/code&gt; for &lt;em&gt;instance variables&lt;/em&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;@@name&lt;/code&gt; for &lt;em&gt;class variables&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at a simple example to understand how we might use &lt;em&gt;class variables&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
    &lt;span class=&quot;vc&quot;&gt;@@animals&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;other_species&lt;/span&gt;
    &lt;span class=&quot;vc&quot;&gt;@@animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [Dog, Cat]&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;other_species&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [Dog]&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;other_species&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [Cat]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;@@animals&lt;/code&gt; &lt;em&gt;class variable&lt;/em&gt; is &lt;strong&gt;shared&lt;/strong&gt; among subclasses, and we can refer to it by using the same syntax from both class and instance methods.&lt;/p&gt;

&lt;h3 id=&quot;limitations-of-class-variables&quot;&gt;Limitations of Class Variables&lt;/h3&gt;
&lt;p&gt;Now, what happens if we wanted to do something different, like storing metadata or configuration in each subclass?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;?&#39;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;
    &lt;span class=&quot;vc&quot;&gt;@@sound&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;woof!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;meow!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &quot;meow!&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &quot;meow!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Because &lt;em&gt;class variables&lt;/em&gt; are shared between the parent class and its subclasses, the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;@@sound&lt;/code&gt; gets stepped over by the last subclass, rather than it taking a different value for each subclass as intended.&lt;/p&gt;

&lt;h2 id=&quot;class-instance-variables&quot;&gt;Class Instance Variables&lt;/h2&gt;
&lt;p&gt;Fortunately, there’s a simple way to achieve this in Ruby:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sound&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@sound&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sound&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;woof!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;meow!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &#39;woof!&#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &#39;meow!&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By using instance variables, each subclass gets its own variable so &lt;code class=&quot;highlighter-rouge&quot;&gt;@sound&lt;/code&gt; does not get stepped over, and each subclass can configure the variable as needed. So, &lt;em&gt;how does it work&lt;/em&gt;?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Classes in Ruby are plain objects, instances of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Class&lt;/code&gt; class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let that sink in for a bit :smile:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Because each class is an object, it can have instance variables just like any other Ruby object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although they are often called &lt;em&gt;class instance variables&lt;/em&gt; to differentiate them from actual &lt;em&gt;class variables&lt;/em&gt;, there’s nothing special about them—they are just plain ole’ instance variables.&lt;/p&gt;

&lt;p&gt;The key practical difference is that &lt;em&gt;class variables&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;@@&lt;/code&gt;) are shared among a class and all of its descendants, whereas &lt;em&gt;class instance variables&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;) are not shared and each class has separate instance variables just like you would expect from different objects.&lt;/p&gt;

&lt;h3 id=&quot;limitations-of-class-instance-variables&quot;&gt;Limitations of Class Instance Variables&lt;/h3&gt;
&lt;p&gt;It’s worth noting that in the last example we lost the convenience of referencing the &lt;code class=&quot;highlighter-rouge&quot;&gt;@sound&lt;/code&gt; variable directly on the &lt;code class=&quot;highlighter-rouge&quot;&gt;talk&lt;/code&gt; method like we did in the &lt;a href=&quot;#limitations-of-class-variables&quot;&gt;second example&lt;/a&gt;, and instead need to define a getter method at the class level in order to access it.&lt;/p&gt;

&lt;p&gt;This is because the same syntax is used for regular &lt;em&gt;instance variables&lt;/em&gt;, so we can only refer to class instance variables directly when we are in the class scope—like in &lt;strong&gt;class methods&lt;/strong&gt; and in the &lt;strong&gt;top-level context&lt;/strong&gt; of a class definition.&lt;/p&gt;

&lt;p&gt;Also, since we can’t use &lt;em&gt;class instance variables&lt;/em&gt; to share values between a class and its descendants, in cases where we would like to access the variable of a parent class we will need to refer to it using a fully qualified getter (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal.sound&lt;/code&gt;) or use &lt;a href=&quot;https://github.com/ElMassimo/queryable/blob/7c5eb3448456e6e84a907cbf4a567c576433428a/lib/queryable/default_scope.rb#L38-L50&quot;&gt;metaprogramming&lt;/a&gt; in order to achieve that.&lt;/p&gt;

&lt;h2 id=&quot;driving-it-home-house-car&quot;&gt;Driving it home :house: :car:&lt;/h2&gt;
&lt;p&gt;In general, &lt;em&gt;class instance variables&lt;/em&gt; are the way to go because they are not shared, which is very useful when building libraries or DSLs, and we don’t run the risk of the value getting stepped over by accident in a subclass.&lt;/p&gt;

&lt;p&gt;On the other hand, when the variable must be shared by a class and its descendants we should always use &lt;em&gt;class variables&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When inheritance is not in play we can use either, but it’s better to be consistent and pick a “default”. I always use &lt;em&gt;class instance variables&lt;/em&gt; unless I actually need the variable to be shared.&lt;/p&gt;

&lt;p&gt;We should now be less fuzzy on what &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; means when used in class methods or in a class definition, and when to use &lt;em&gt;class instance variables&lt;/em&gt; instead of &lt;em&gt;class variables&lt;/em&gt; :smiley:&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/ruby-class-variables.jpg" />
    <author>
      <name>Máximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
  </entry>

  <entry>
    <title>Optimizing AngularJS performance with events</title>
    <link href="http://maximomussini.com/posts/angular-less-watchers/" rel="alternate" type="text/html" title="Optimizing AngularJS performance with events" />
    <published>2016-04-15T20:38:00-03:00</published>
  
    <updated>2016-04-15T20:38:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/angular-less-watchers</id>
    <content type="html" xml:base="http://maximomussini.com/posts/angular-less-watchers/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/angular-less-watchers.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;Like we saw in the &lt;a href=&quot;/posts/angular-intro/&quot;&gt;previous post&lt;/a&gt;, &lt;em&gt;AngularJS&lt;/em&gt; uses watchers to detect changes, allowing it to update views as needed. &lt;em&gt;Angular&lt;/em&gt; will create a watcher for every expression that we add to our templates using data-bindings, &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-repeat&lt;/code&gt;, or similar directives.&lt;/p&gt;

&lt;p&gt;As we learned, each time a watcher is created &lt;em&gt;Angular&lt;/em&gt; will add the expression to a &lt;a href=&quot;/posts/angular-intro/#the-watch-list-and-dirty-checking&quot;&gt;&lt;em&gt;watch list&lt;/em&gt;&lt;/a&gt;, which is then iterated during each digest cycle to evaluate every expression and detect changes. That means, the more watchers are registered, the more &lt;em&gt;Angular&lt;/em&gt; has to process during &lt;a href=&quot;/posts/angular-intro/#repeat-the-digest-cycle&quot;&gt;the digest cycle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In pages that have many components—such as long lists and grids—the amount of watchers can be very high, which can negatively affect the performance of our app and make it feel unresponsive.&lt;/p&gt;

&lt;p&gt;In this post we will take a look at two techniques that can help us mitigate this problem and speed up our applications.&lt;/p&gt;

&lt;h2 id=&quot;one-time-bindings&quot;&gt;One-Time Bindings&lt;/h2&gt;
&lt;p&gt;One of the most convenient techniques that we have to reduce the amount of watchers is the use of &lt;em&gt;one-time bindings&lt;/em&gt;. Any expression that starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;::&lt;/code&gt; is considered a &lt;em&gt;one-time expression&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user in ::users&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ ::user.name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Angular&lt;/em&gt; will remove a &lt;em&gt;one-time expression&lt;/em&gt; from the watch list once it has been &lt;a href=&quot;https://docs.angularjs.org/guide/expression#value-stabilization-algorithm&quot;&gt;resolved&lt;/a&gt;, unlike normal expressions which are evaluated on every digest cycle.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the expression will not change once set, it is a candidate for one-time binding. For example, internationalization :uk: :es:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a result, we have less expressions being watched, which makes the digest loop faster, increases the responsiveness of the app, and allows more information to be displayed at the same time.&lt;/p&gt;

&lt;p&gt;Using one-time bindings is an easy and effective way to reduce the amount of watchers, but there’s a catch. &lt;em&gt;Angular&lt;/em&gt; won’t detect changes on each digest cycle and update the view, which makes them only suitable for values that won’t change.&lt;/p&gt;

&lt;h2 id=&quot;recompiling-with-events&quot;&gt;Recompiling with Events&lt;/h2&gt;
&lt;p&gt;What about expressions with a value that might change, yet remain the same most of the time? It’s a waste to evaluate them on every digest cycle, but we can’t just use one-time expressions since the value might eventually change.&lt;/p&gt;

&lt;p&gt;A technique that I have been using in pages where performance is critical is &lt;em&gt;event-driven recompilation&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;recompile-on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user:changed&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ ::user.name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This technique has three key aspects: one-time expressions, compilation, and event propagation. Let’s see how the &lt;code class=&quot;highlighter-rouge&quot;&gt;recompileOn&lt;/code&gt; directive could be written:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Public: Recompiles an element if an event occurs.
#
# NOTE: Do not use in combination with ng-if or ng-repeat, unless a one-time
# binding is used in the expression.
&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;directive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;recompileOn&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restrict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;A&#39;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outerHTML&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Internal: Will trigger a recompilation if the event is triggered.
&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;recompileOnEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eventName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Remove the previously added listener, if any.
&lt;/span&gt;            &lt;span class=&quot;nx&quot;&gt;removeListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# Replace the element after the digest loop that triggered the event has ended.
&lt;/span&gt;            &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$evalAsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;newEl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

              &lt;span class=&quot;c1&quot;&gt;# Destroy the old scope, since a new one was created by using compile.
&lt;/span&gt;              &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;removeListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;recompileOnEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recompileOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The directive will listen for a particular event on the current &lt;em&gt;scope&lt;/em&gt;, and force a recompilation of the element when the event is triggered. This means that every directive inside the element will be processed from scratch, including our &lt;em&gt;one-time expressions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Events can be triggered as usual:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$broadcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;user:changed&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;One-time bindings provide a very efficient way to render dynamic values once without taking up watchers, while &lt;code class=&quot;highlighter-rouge&quot;&gt;$on&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$compile&lt;/code&gt; provide a helpful way to render from scratch when we need to. This combination works very well for complex pages where the amount of watchers is taking a toll on performance.&lt;/p&gt;

&lt;p&gt;There are many variations that we can introduce to the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;recompileOn&lt;/code&gt;, such as allowing to pass several event names, or checking the event arguments for a specific value, such as an id. We can take this idea as far as we want to :rocket:&lt;/p&gt;

&lt;p&gt;As with any optimization, it’s important to consider whether the performance improvement justifies the additional complexity. Use it wisely!&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/angular-less-watchers.jpg" />
    <author>
      <name>Máximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
    <summary>In this post we take a look at effective ways to reduce the amount of watchers in our _AngularJS_ application and improve the performance of our app.</summary>
  
  </entry>

  <entry>
    <title>AngularJS: Watchers and the Digest Cycle</title>
    <link href="http://maximomussini.com/posts/angular-intro/" rel="alternate" type="text/html" title="AngularJS: Watchers and the Digest Cycle" />
    <published>2016-03-29T22:29:00-03:00</published>
  
    <updated>2016-03-29T22:29:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/angular-intro</id>
    <content type="html" xml:base="http://maximomussini.com/posts/angular-intro/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/angular-intro.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;&lt;em&gt;AngularJS&lt;/em&gt; might not be hip anymore, but it’s still a useful framework to create interactive web apps. In this post we will take a brief tour through &lt;em&gt;Angular&lt;/em&gt;’s internals: watchers and the digest cycle.&lt;/p&gt;

&lt;h2 id=&quot;bindings-and-watchers&quot;&gt;Bindings and Watchers&lt;/h2&gt;
&lt;p&gt;One of the most useful features in &lt;em&gt;AngularJS&lt;/em&gt; are data-bindings, which allow us to bind a model or property to a view; whenever the model changes, the view is updated automatically.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user.name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ user.name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;How does that work? When you write an expression like &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;user.name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;, &lt;em&gt;Angular&lt;/em&gt; creates a &lt;em&gt;watcher&lt;/em&gt; that observes the &lt;code class=&quot;highlighter-rouge&quot;&gt;user.name&lt;/code&gt; property, which will be triggered whenever the model changes, allowing &lt;em&gt;Angular&lt;/em&gt; to update the view content.&lt;/p&gt;

&lt;p&gt;We can also create watchers manually and execute arbitrary code when the model changes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;user.name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;user.name changed from&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;to&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first argument passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;$watch&lt;/code&gt; is known as the &lt;em&gt;model&lt;/em&gt;, and the second argument is the &lt;em&gt;listener&lt;/em&gt; function, which is called whenever the model (or more precisely, value of the watched expression) changes.&lt;/p&gt;

&lt;p&gt;Now that we know what watchers can do for us, let’s dig a bit deeper and learn how they work. How does &lt;em&gt;Angular&lt;/em&gt; figure out when &lt;code class=&quot;highlighter-rouge&quot;&gt;user.name&lt;/code&gt; changed in order to call the &lt;em&gt;listener&lt;/em&gt;?&lt;/p&gt;

&lt;h2 id=&quot;the-watch-list-and-dirty-checking&quot;&gt;The Watch List and Dirty Checking&lt;/h2&gt;

&lt;p&gt;Each time a watcher is created, &lt;em&gt;Angular&lt;/em&gt; adds the expression to a &lt;em&gt;watch list&lt;/em&gt; to track changes. &lt;em&gt;Angular&lt;/em&gt; will walk down the watch list from time to time and resolve each watcher through a process called &lt;em&gt;dirty checking&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keep the last value for each watched expression.&lt;/li&gt;
  &lt;li&gt;Evaluate the expression: if the value is the same than the last one continue down the watch list.&lt;/li&gt;
  &lt;li&gt;If the value is different the expression is &lt;strong&gt;dirty&lt;/strong&gt;, so propagate the change by calling each &lt;em&gt;listener&lt;/em&gt; with the old and the new value.&lt;/li&gt;
  &lt;li&gt;Once the change has been synchronized across the app, replace the last value with the new value.&lt;/li&gt;
  &lt;li&gt;Continue to the next expression in the watch list.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;For every UI element that is bound to a $scope object, a watch is created and added to the &lt;em&gt;watch list&lt;/em&gt;, which is checked on every digest loop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;repeat-the-digest-cycle&quot;&gt;:repeat: The Digest Cycle&lt;/h2&gt;
&lt;p&gt;And it’s in the &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$digest&lt;/code&gt;&lt;/a&gt; cycle where every watcher in the watch list is evaluated, and the changes propagated to the &lt;em&gt;listeners&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This cycle starts as a result of a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.$digest()&lt;/code&gt;, which often happens as a result of an action performed by the user. For example, clicking an element with the &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-click&lt;/code&gt; directive will explicitly call &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.$digest()&lt;/code&gt; and start the loop.&lt;/p&gt;

&lt;p&gt;Once the cycle starts, it will go through the &lt;em&gt;watch list&lt;/em&gt;, propagating changes to &lt;em&gt;listeners&lt;/em&gt; as needed.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are many &lt;em&gt;Angular&lt;/em&gt; directives and services that will automatically trigger a digest cycle, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-model&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$timeout&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;crown-keep-calm-and-digest&quot;&gt;:crown: Keep Calm and Digest&lt;/h2&gt;
&lt;p&gt;Once &lt;em&gt;Angular&lt;/em&gt; has run through the entire watch list, if any value changed, it will start a new digest cycle until no model is changed and no watchers are triggered.&lt;/p&gt;

&lt;p&gt;Why does it run the loop all over again? Because any &lt;code class=&quot;highlighter-rouge&quot;&gt;$watch&lt;/code&gt; listener could change the value of an expression that was evaluated earlier in the digest loop, so &lt;em&gt;Angular&lt;/em&gt; wouldn’t be able to detect and propagate that change.&lt;/p&gt;

&lt;p&gt;Remember that &lt;em&gt;Angular&lt;/em&gt; uses dirty-checking as a way to determine if the watched expression changed, so the only way to guarantee all changes are propagated is to go through the &lt;em&gt;watch list&lt;/em&gt; again and check that no values were changed during the previous digest cycle.&lt;/p&gt;

&lt;p&gt;This means that the digest loop will run a minimum of two times, even when &lt;em&gt;listeners&lt;/em&gt; don’t change any models.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Minimize changes to watched models when inside listener functions, each change could trigger an extra digest loop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the loop runs ten times or more, &lt;em&gt;Angular&lt;/em&gt; will throw an exception to prevent a possible infinite loop, which would make the app unusable.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Because of the nature of &lt;em&gt;Angular&lt;/em&gt;’s internals, it’s very important to minimize the amount of watchers in order to keep the digest cycle fast.&lt;/p&gt;

&lt;p&gt;At the same time, it’s important to ensure that our application doesn’t trigger more digest cycles than necessary, since each loop requires evaluating every watcher in the list.&lt;/p&gt;

&lt;p&gt;While watchers are a very useful feature, the digest cycle implementation takes a brute force approach, which makes it almost magical at times, but is inefficient and can cause performance problems in complex applications.&lt;/p&gt;

&lt;p&gt;In the next post, we will take a look at some techniques that help to reduce the amount of watchers and improve the performance of our app. Stay tuned! :smiley:&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/angular-intro.jpg" />
    <author>
      <name>Máximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
    <summary>_AngularJS_ might not be hip anymore, but it&#39;s still a useful framework to create interactive web apps. In this post we will take a brief tour through _Angular_&#39;s internals: watchers and the digest cycle.</summary>
  
  </entry>

  <entry>
    <title>Positive-Negative Assertions in Cucumber</title>
    <link href="http://maximomussini.com/posts/cucumber-to_or_not_to/" rel="alternate" type="text/html" title="Positive-Negative Assertions in Cucumber" />
    <published>2016-02-03T15:34:00-03:00</published>
  
    <updated>2016-02-03T15:34:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/cucumber-to_or_not_to</id>
    <content type="html" xml:base="http://maximomussini.com/posts/cucumber-to_or_not_to/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/cucumber-to_or_not_to.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/cucumber/cucumber-ruby&quot;&gt;&lt;em&gt;Cucumber&lt;/em&gt;&lt;/a&gt; steps often involve asserting a condition or the opposite of it. For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I should see a &quot;(.*?)&quot; comment$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;li.comment&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;text: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I should not see a &quot;(.*?)&quot; comment$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;not_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;li.comment&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;text: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not only is it boring to write steps like this: it also has the downside of introducing duplication into our test steps. If the DOM changes, we are forced to update both steps.&lt;/p&gt;

&lt;p&gt;Even worse, if the DOM changes and we forget to update the negative assertion, it will always pass since the element doesn’t even exist!&lt;/p&gt;

&lt;p&gt;Let’s give it another shot, but this time we will encapsulate the DOM references:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;have_comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;have_css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;li.comment&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;text: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I should see a &quot;(.*?)&quot; comment$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I should not see a &quot;(.*?)&quot; comment$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;not_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code is easier to read, and we solved a potential maintainability issue, nice! It’s possible to add a little touch of regular expressions to combine both steps into one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I should( not)? see a &quot;(.*?)&quot; comment$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should_not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should_not&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;not_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we write &lt;em&gt;“should not see”&lt;/em&gt; then the group will match and the &lt;code class=&quot;highlighter-rouge&quot;&gt;should_not&lt;/code&gt; variable will contain &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot; not&quot;&lt;/code&gt;. If we write &lt;em&gt;“should see”&lt;/em&gt; then the group won’t capture anything and &lt;code class=&quot;highlighter-rouge&quot;&gt;should_not&lt;/code&gt; will be &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. This allows us to make a simple conditional check.&lt;/p&gt;

&lt;p&gt;We can leverage Ruby’s expressiveness and take it a bit further:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I should( not)? see a &quot;(.*?)&quot; comment$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should_not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should_not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:not_to&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Shorter, but not necessarily easier to understand. Fortunately, we can create our own custom RSpec matcher to encapsulate this pattern and make it easier to reuse and understand:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# features/support/to_or.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PositiveNegativeExpectationHandler&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not_to&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;not_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Expectations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ExpectationTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PositiveNegativeExpectationHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we are able to express the step in a very concise and readable way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I should( not)? see a &quot;(.*?)&quot; comment$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;No magic here :tophat:, just clever naming :rabbit:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;to_or&lt;/code&gt; has been a very helpful addition to our projects, allowing us to write simple steps that read like English. You can just copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;PositiveNegativeExpectationHandler&lt;/code&gt; to a support file in your project (like &lt;code class=&quot;highlighter-rouge&quot;&gt;features/support/to_or.rb&lt;/code&gt;) and start using it right away :smiley:&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/cucumber-to_or_not_to.jpg" />
    <author>
      <name>Máximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
  </entry>

  <entry>
    <title>Redirecting AJAX requests in Rails</title>
    <link href="http://maximomussini.com/posts/rails-ajax_redirect/" rel="alternate" type="text/html" title="Redirecting AJAX requests in Rails" />
    <published>2016-01-11T17:00:00-03:00</published>
  
    <updated>2016-01-11T17:00:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/rails-ajax_redirect</id>
    <content type="html" xml:base="http://maximomussini.com/posts/rails-ajax_redirect/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/rails-ajax_redirect.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/rails/jquery-rails&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jquery-rails&lt;/code&gt;&lt;/a&gt; powers links and forms in Rails: it’s what makes &lt;code class=&quot;highlighter-rouge&quot;&gt;remote: true&lt;/code&gt; work, allowing any link to make an AJAX request unobtrusively.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ElMassimo/rails-ajax_redirect&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rails-ajax_redirect&lt;/code&gt;&lt;/a&gt; is an extension to this unobtrusive behaviour that adds AJAX support to &lt;code class=&quot;highlighter-rouge&quot;&gt;redirect_to&lt;/code&gt;. It allows us to redirect an AJAX request as usual, instead of having to perform the redirect by handling the response manually in JS every time.&lt;/p&gt;

&lt;p&gt;This is helpful in many different scenarios, and just like &lt;code class=&quot;highlighter-rouge&quot;&gt;remote: true&lt;/code&gt;, it allows us to skip some of the boilerplate in cases where we need to redirect the user to a different page.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ElMassimo/rails-ajax_redirect&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rails::AjaxRedirect&lt;/code&gt;&lt;/a&gt; extends &lt;code class=&quot;highlighter-rouge&quot;&gt;redirect_to&lt;/code&gt; to use a custom status code for ajax
requests, while still setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;Location&lt;/code&gt; header. On the front-end, it adds a handler for the &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax:success&lt;/code&gt; event, that navigates to the location in the header for responses that have the custom status code.&lt;/p&gt;

&lt;p&gt;This makes it possible to write a simple redirect as usual, but without having to handle it manually every time :smiley:&lt;/p&gt;

&lt;h2 id=&quot;turbolinks&quot;&gt;Turbolinks&lt;/h2&gt;
&lt;p&gt;If your application uses &lt;a href=&quot;https://github.com/rails/turbolinks&quot;&gt;&lt;em&gt;Turbolinks&lt;/em&gt;&lt;/a&gt; check out &lt;a href=&quot;https://github.com/remind101/turbolinks-redirect&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;turbolinks-redirect&lt;/code&gt;&lt;/a&gt;, on which &lt;a href=&quot;https://github.com/ElMassimo/rails-ajax_redirect&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rails-ajax_redirect&lt;/code&gt;&lt;/a&gt; is based on. The advantage is that it will perform faster navigation by leveraging &lt;em&gt;Turbolinks&lt;/em&gt; to visit the new location.&lt;/p&gt;

&lt;h2 id=&quot;angularjs&quot;&gt;AngularJS&lt;/h2&gt;
&lt;p&gt;If your application makes the AJAX request using &lt;code class=&quot;highlighter-rouge&quot;&gt;$http&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery&lt;/code&gt;, it will be necessary to add an interceptor similar to this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$httpProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$httpProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interceptors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;AjaxRedirectInterceptor&#39;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Add a header to let Rails know that it&#39;s an Ajax request.
&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;$httpProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;X-REQUESTED-WITH&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;XMLHttpRequest&#39;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;AjaxRedirectInterceptor&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;interceptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AJAX_REDIRECT_STATUS_CODE&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/rails-ajax_redirect.jpg" />
    <author>
      <name>Máximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
  </entry>

  <entry>
    <title>Anko DSL vs Android XML-First</title>
    <link href="http://maximomussini.com/posts/anko-vs-android-xml/" rel="alternate" type="text/html" title="Anko DSL vs Android XML-First" />
    <published>2016-01-04T17:06:00-03:00</published>
  
    <updated>2016-01-04T17:06:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/anko-vs-android-xml</id>
    <content type="html" xml:base="http://maximomussini.com/posts/anko-vs-android-xml/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/anko-vs-android-xml.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/kotlin/anko&quot;&gt;&lt;em&gt;Anko&lt;/em&gt;&lt;/a&gt; is a library for &lt;em&gt;Android&lt;/em&gt; development in &lt;a href=&quot;https://kotlinlang.org&quot;&gt;&lt;em&gt;Kotlin&lt;/em&gt;&lt;/a&gt;. The library provides helper methods that take advantage of &lt;em&gt;Kotlin&lt;/em&gt;’s extension functions as a way to reduce the amount of boilerplate the &lt;em&gt;Android SDK&lt;/em&gt; requires. Those extension functions make it possible to accomplish common tasks like starting an activity or displaying a toast in a very succinct way.&lt;/p&gt;

&lt;p&gt;A big part of the library though, focuses on creating a &lt;a href=&quot;https://kotlinlang.org/docs/reference/type-safe-builders.html&quot;&gt;type-safe builder&lt;/a&gt; for creating view hierarchies, as an alternative to the XML-inflated view approach. Some of the benefits of defining a layout with &lt;em&gt;Anko&lt;/em&gt; are type-safety, and efficiency, since it’s not necessary to parse the XML.&lt;/p&gt;

&lt;p&gt;I decided to take the DSL for a test drive by rewriting the “Navigation Drawer Activity” template from &lt;em&gt;AndroidStudio&lt;/em&gt;, replacing some of the XML layouts with the &lt;em&gt;Anko DSL&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/anko-vs-android-xml/navigation-drawer-activity-template.png&quot; alt=&quot;Alt&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can define an &lt;code class=&quot;highlighter-rouge&quot;&gt;AnkoComponent&lt;/code&gt; to create the UI:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;package com.maximomussini.anko

import android.support.design.widget.AppBarLayout
import android.support.design.widget.Snackbar
import android.support.v4.content.ContextCompat
import android.support.v4.view.GravityCompat
import android.util.TypedValue
import android.view.Gravity
import android.view.View
import com.maximomussini.anko.util.snackbar
import org.jetbrains.anko.*
import org.jetbrains.anko.appcompat.v7.toolbar
import org.jetbrains.anko.design.appBarLayout
import org.jetbrains.anko.design.coordinatorLayout
import org.jetbrains.anko.design.floatingActionButton
import org.jetbrains.anko.design.navigationView
import org.jetbrains.anko.support.v4._DrawerLayout
import org.jetbrains.anko.support.v4.drawerLayout

class MainUI : AnkoComponent&amp;lt;MainActivity&amp;gt; {

    override fun createView(ui: AnkoContext&amp;lt;MainActivity&amp;gt;): View = with(ui) {
        drawerLayout {
            id = R.id.drawer
            fitsSystemWindows = true
            createAppBar(ui)
            createNavigationView(ui)
        }
    }

    fun _DrawerLayout.createAppBar(ui: AnkoContext&amp;lt;MainActivity&amp;gt;) {
        coordinatorLayout {
            fitsSystemWindows = true

            appBarLayout {
                toolbar {
                    id = R.id.toolbar
                    popupTheme = R.style.AppTheme_PopupOverlay
                    backgroundResource = R.color.colorPrimary
                }.lparams(width = matchParent) {
                    val tv = TypedValue()
                    if (ui.owner.theme.resolveAttribute(R.attr.actionBarSize, tv, true)) {
                        height = TypedValue.complexToDimensionPixelSize(tv.data, resources.displayMetrics);
                    }
                }
            }.lparams(width = matchParent)

            relativeLayout {
                horizontalPadding = resources.getDimensionPixelSize(R.dimen.activity_horizontal_margin)
                verticalPadding = resources.getDimensionPixelSize(R.dimen.activity_vertical_margin)
                textView(&quot;Hello World!&quot;)
            }.lparams(width = matchParent, height = matchParent) {
                behavior = AppBarLayout.ScrollingViewBehavior()
            }

            floatingActionButton {
                imageResource = android.R.drawable.ic_dialog_email
                backgroundColor = ContextCompat.getColor(ui.owner, R.color.colorAccent)
                onClick {
                    snackbar(&quot;Replace with your own action&quot;, Snackbar.LENGTH_LONG) {
                        setAction(&quot;Action&quot;) { ui.toast(&quot;Clicked Snack&quot;) }
                    }
                }
            }.lparams {
                margin = resources.getDimensionPixelSize(R.dimen.fab_margin)
                gravity = Gravity.BOTTOM or GravityCompat.END
            }
        }.lparams(width = matchParent, height = matchParent)
    }

    fun _DrawerLayout.createNavigationView(ui: AnkoContext&amp;lt;MainActivity&amp;gt;) {
        navigationView {
            fitsSystemWindows = true
            setNavigationItemSelectedListener(ui.owner)
            inflateHeaderView(R.layout.nav_header_main)
            inflateMenu(R.menu.activity_main_drawer)
        }.lparams(height = matchParent, gravity = GravityCompat.START)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then, use the component to set the content view for the activity instead of using an XML layout:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;package com.maximomussini.anko

import android.os.Bundle
import android.support.design.widget.NavigationView
import android.support.v4.view.GravityCompat
import android.support.v4.widget.DrawerLayout
import android.support.v7.app.ActionBarDrawerToggle
import android.support.v7.app.AppCompatActivity
import android.support.v7.widget.Toolbar
import android.view.Menu
import android.view.MenuItem
import org.jetbrains.anko.find
import org.jetbrains.anko.setContentView
import org.jetbrains.anko.toast

class MainActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {

    lateinit var drawer: DrawerLayout

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        MainUI().setContentView(this)
        drawer = find&amp;lt;DrawerLayout&amp;gt;(R.id.drawer)

        val toolbar = find&amp;lt;Toolbar&amp;gt;(R.id.toolbar)
        setSupportActionBar(toolbar)

        val toggle = ActionBarDrawerToggle(this, drawer, toolbar,
                R.string.navigation_drawer_open, R.string.navigation_drawer_close)
        drawer.setDrawerListener(toggle)
        toggle.syncState()
    }

    override fun onBackPressed() {
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START)
        } else {
            super.onBackPressed()
        }
    }

    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.main, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.action_settings -&amp;gt; {
                toast(&quot;Settings&quot;)
                return true
            }
        }
        return super.onOptionsItemSelected(item)
    }

    override fun onNavigationItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.nav_camera -&amp;gt; toast(&quot;Camera&quot;)
            R.id.nav_gallery -&amp;gt; toast(&quot;Gallery&quot;)
            R.id.nav_slideshow -&amp;gt; toast(&quot;Slideshow&quot;)
            R.id.nav_manage -&amp;gt; toast(&quot;Manage&quot;)
            R.id.nav_share -&amp;gt; toast(&quot;Share&quot;)
            R.id.nav_send -&amp;gt; toast(&quot;Send&quot;)
        }
        drawer.closeDrawer(GravityCompat.START)
        return true
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In contrast with the &lt;a href=&quot;https://gist.github.com/ElMassimo/839df056c44b7c8e53b7&quot;&gt;generated version&lt;/a&gt;, the &lt;em&gt;Anko&lt;/em&gt; version does require some boilerplate to set dimensions and colors from resources, but has a lot of expressiveness when it comes to bindings. Notice how it’s not necessary to create references to most of the components, since the listeners are added to each view when they are instantiated:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;floatingActionButton {
    onClick { snackbar(&quot;FAB&quot;, Snackbar.LENGTH_LONG) }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Compare this to the usual code, which incurs in the cost of finding the view (even if it’s a very low cost) and referencing the view id:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;val fab:FloatingActionButton = findViewById(R.id.fab) as FloatingActionButton
fab.setOnClickListener {
  Snackbar.make(it, &quot;FAB&quot;, Snackbar.LENGTH_LONG).show()
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;em&gt;Anko DSL&lt;/em&gt; exposes the native API of each View, so it’s only possible to do what &lt;em&gt;Android&lt;/em&gt; components can do, with the exception of a few synthetic properties to set text or an image from a resource.&lt;/p&gt;

&lt;p&gt;Unfortunately, that means things get pretty rough once we dive into styling and theming. The &lt;em&gt;Android SDK&lt;/em&gt; and support libraries contain a lot of &lt;em&gt;hacks&lt;/em&gt; that rely on the view being created by a &lt;code class=&quot;highlighter-rouge&quot;&gt;LayoutInflater&lt;/code&gt; from the XML, initializing the view with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Context&lt;/code&gt; and an &lt;code class=&quot;highlighter-rouge&quot;&gt;AttributeSet&lt;/code&gt;. There’s no first-class support for setting the &lt;a href=&quot;https://github.com/Kotlin/anko/issues/16&quot;&gt;style&lt;/a&gt; or theme programmatically, which means it’s not possible to set them when using &lt;em&gt;Anko&lt;/em&gt; either.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Anko&lt;/em&gt; does provide a way to &lt;a href=&quot;https://github.com/Kotlin/anko#styles&quot;&gt;style a view&lt;/a&gt;, but it leaves much to be desired since it requires targeting the different view classes manually, unlike styling in XML where valid attributes are applied automatically.&lt;/p&gt;

&lt;p&gt;When it comes to theming, &lt;em&gt;Android&lt;/em&gt; uses &lt;a href=&quot;http://chris.banes.me/2014/11/12/theme-vs-style/#underlying-functionality&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ContextThemeWrapper&lt;/code&gt;&lt;/a&gt; internally to override &lt;code class=&quot;highlighter-rouge&quot;&gt;getTheme&lt;/code&gt; for a view or its children. Since the &lt;a href=&quot;https://github.com/Kotlin/anko/releases/tag/v0.8.1&quot;&gt;current &lt;em&gt;Anko&lt;/em&gt; version&lt;/a&gt; does not allow to override the context used to create a view inside the DSL, using a theme-wrapped context manually is extremely contrived.&lt;/p&gt;

&lt;p&gt;No theming support is a serious limitation, since most components in the design library need a theme to be styled properly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/anko-vs-android-xml/anko-vs-xml.png&quot; alt=&quot;Anko does not have theming support&quot; class=&quot;square&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It should be possible to add support for theming in &lt;em&gt;Anko&lt;/em&gt;, but unfortunately theming is just one of many XML-based hacks and workarounds in the SDK.&lt;/p&gt;

&lt;p&gt;Adding views with Java code is very cumbersome, so most Java developers will stick to XML, and the SDK and support library will continue to do hacks around XML inflation.&lt;/p&gt;

&lt;p&gt;The idea behind the &lt;em&gt;Anko DSL&lt;/em&gt; is a very interesting one, but it seems like the &lt;em&gt;Android SDK&lt;/em&gt; is not polished enough for &lt;em&gt;Anko&lt;/em&gt; to reach its full potential.&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/anko-vs-android-xml.jpg" />
    <author>
      <name>Máximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
  </entry>

  <entry>
    <title>CoffeeScript and JS Libraries</title>
    <link href="http://maximomussini.com/posts/coffeescript-js-libraries/" rel="alternate" type="text/html" title="CoffeeScript and JS Libraries" />
    <published>2015-12-31T17:58:00-03:00</published>
  
    <updated>2015-12-31T17:58:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/coffeescript-js-libraries</id>
    <content type="html" xml:base="http://maximomussini.com/posts/coffeescript-js-libraries/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/coffeescript-js-libraries.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;A language helps to shape the libraries that are written on it. This can have unexpected side-effects when using these libraries from a different language.&lt;/p&gt;

&lt;p&gt;In the frontend this has become increasingly more common because of all the available languages that compile to JavaScript. &lt;a href=&quot;http://coffeescript.org/&quot;&gt;&lt;em&gt;CoffeeScript&lt;/em&gt;&lt;/a&gt; was one of the first ones to gain adoption, but nowadays we have a myriad of available languages like &lt;a href=&quot;http://elm-lang.org/&quot;&gt;&lt;em&gt;Elm&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/clojure/clojurescript&quot;&gt;&lt;em&gt;ClojureScript&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;http://opalrb.org/&quot;&gt;&lt;em&gt;Opal&lt;/em&gt;&lt;/a&gt;, and &lt;a href=&quot;https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS&quot;&gt;many more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Recently, we were trying to debug a strange issue with &lt;a href=&quot;http://www.nick-cherry.com&quot;&gt;one of my coworkers&lt;/a&gt;, where we had a list of selectable items with a checkbox to select/unselect all the items. Selecting all the items was working properly, but only the first item got unselected.&lt;/p&gt;

&lt;figure class=&quot;example-wrapper&quot;&gt;
  &lt;iframe src=&quot;/examples/posts/coffeescript-js-libraries/select_all_broken.html&quot; frameborder=&quot;0&quot; class=&quot;example&quot; width=&quot;&quot; height=&quot;254&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;

&lt;p&gt;After debugging it for a while we reached the conclusion that the iteration was being interrupted. Could &lt;a href=&quot;http://lodash.com&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lodash&lt;/code&gt;&lt;/a&gt; have such a serious bug?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;selectAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isSelected&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Fortunately, we decided to skip that theory, and instead reached for the &lt;a href=&quot;https://lodash.com/docs#forEach&quot;&gt;documentation&lt;/a&gt;, which stated:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Iteratee functions may exit iteration early by explicitly returning false.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which sounds like a reasonable feature that can help to create more efficient algorithms—though we weren’t returning &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;But CoffeeScript was. The language draws inspiration from Ruby, and it borrows features like expressions and implicit returns. For functions, this means that the last executed expression becomes the return value of the function. This allows us to write very concise functions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;isEven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we reinterpret our snippet above taking implicit returns into account, it is equivalent to:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isSelected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When we unselect all the items and &lt;code class=&quot;highlighter-rouge&quot;&gt;selectAll(false)&lt;/code&gt; is called, the first iteration returns the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;task.selected&lt;/code&gt; which is &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, causing &lt;em&gt;lodash&lt;/em&gt; to exit the iteration. Mistery solved :mag:&lt;/p&gt;

&lt;figure class=&quot;example-wrapper&quot;&gt;
  &lt;iframe src=&quot;/examples/posts/coffeescript-js-libraries/select_all.html&quot; frameborder=&quot;0&quot; class=&quot;example&quot; width=&quot;&quot; height=&quot;254&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;

&lt;p&gt;We can fix the bug by explicitly returning &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; on each loop, which will avoid stopping the iteration, and all the items will be unselected correctly.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;selectAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isSelected&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These are two useful features on their own, yet extremely inconvenient when combined. The reason is that the library was written for a language with a different mindset. The design of the language and the design of the library are not fully compatible.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Watch out for language differences when using libraries written for another language, they will bite sooner or later.&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/coffeescript-js-libraries.jpg" />
    <author>
      <name>Máximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
  </entry>

  <entry>
    <title>Improving your Git Experience in Bash</title>
    <link href="http://maximomussini.com/posts/bash-git-prompt/" rel="alternate" type="text/html" title="Improving your Git Experience in Bash" />
    <published>2015-12-14T16:46:00-03:00</published>
  
    <updated>2015-12-14T16:46:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/bash-git-prompt</id>
    <content type="html" xml:base="http://maximomussini.com/posts/bash-git-prompt/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/bash-git-prompt.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;&lt;em&gt;Bash&lt;/em&gt; is the default terminal for most Unix distributions, so it’s very appealing to get the best out of it. If you enjoy customizing your setup, you might want to try something like &lt;a href=&quot;http://ohmyz.sh/&quot;&gt;zsh&lt;/a&gt; instead, which comes with similar functionality out of the box.&lt;/p&gt;

&lt;p&gt;Let’s take a look at how we can improve our &lt;em&gt;Git&lt;/em&gt; usage in &lt;em&gt;bash&lt;/em&gt; by adding a few plugins :neckbeard:&lt;/p&gt;

&lt;h2 id=&quot;bash-git-autocompletion&quot;&gt;Bash Git Autocompletion&lt;/h2&gt;
&lt;p&gt;A great way to get &lt;em&gt;Git&lt;/em&gt; autocompletion is to install the &lt;code class=&quot;highlighter-rouge&quot;&gt;bash-completion&lt;/code&gt; package. This plugin will improve our experience when switching or pulling different branches, and is a real time-saver when using &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows#Topic-Branches&quot;&gt;topic branches&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bash-git-prompt/git-autocompletion.png&quot; alt=&quot;Checking out Branches&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-on-os-x&quot;&gt;Installation on OS X&lt;/h3&gt;
&lt;p&gt;First, install &lt;code class=&quot;highlighter-rouge&quot;&gt;bash-completion&lt;/code&gt; using &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install bash-completion&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and then add this line to &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt; to load the plugin:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -f &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;brew --prefix&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/etc/bash_completion&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;brew --prefix&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/etc/bash_completion&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;installation-on-ubuntu&quot;&gt;Installation on Ubuntu&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install bash-completion&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;bash-git-prompt&quot;&gt;Bash Git Prompt&lt;/h2&gt;
&lt;p&gt;Running a &lt;em&gt;Git&lt;/em&gt; command without knowing the current branch is like running &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt; in the terminal without knowning the current directory: it’s dangerous and error-prone.&lt;/p&gt;

&lt;p&gt;Sure, we could type &lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt; every time before running those commands, but it wouldn’t be practical. Why not take the same approach for &lt;em&gt;Git&lt;/em&gt;, and display the current branch in the terminal prompt?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/magicmonty/bash-git-prompt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash-git-prompt&lt;/code&gt;&lt;/a&gt; is a project that takes care of that, displaying the current branch and other helpful stats. It has many different themes available, which can be customized by specifying a theme through the &lt;code class=&quot;highlighter-rouge&quot;&gt;GIT_PROMPT_THEME&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bash-git-prompt/git-prompt-default.png&quot; alt=&quot;Default Theme&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-on-os-x-1&quot;&gt;Installation on OS X&lt;/h3&gt;
&lt;p&gt;First, install &lt;code class=&quot;highlighter-rouge&quot;&gt;bash-git-prompt&lt;/code&gt; using &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install bash-git-prompt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then source the file in your ~/.bash_profile as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -f &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;brew --prefix&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/opt/bash-git-prompt/share/gitprompt.sh&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;brew --prefix&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/opt/bash-git-prompt/share/gitprompt.sh&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;installation-on-ubuntu-1&quot;&gt;Installation on Ubuntu&lt;/h4&gt;
&lt;p&gt;It might be necessary to &lt;a href=&quot;https://github.com/magicmonty/bash-git-prompt#via-git-clone&quot;&gt;clone the project’s git repo&lt;/a&gt;, and source &lt;code class=&quot;highlighter-rouge&quot;&gt;gitprompt.sh&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; file.&lt;/p&gt;

&lt;h4 id=&quot;basic-customization&quot;&gt;Basic Customization&lt;/h4&gt;
&lt;p&gt;The following are some settings I modified in my &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;GIT_PROMPT_ONLY_IN_REPO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;c&quot;&gt;# Use the default prompt when not in a git repo.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GIT_PROMPT_FETCH_REMOTE_STATUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;c&quot;&gt;# Avoid fetching remote status&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GIT_PROMPT_SHOW_UPSTREAM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;c&quot;&gt;# Don&#39;t display upstream tracking branch&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GIT_SHOW_UNTRACKED_FILES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no &lt;span class=&quot;c&quot;&gt;# Don&#39;t count untracked files (no, normal, all)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These constants must be defined before sourcing &lt;code class=&quot;highlighter-rouge&quot;&gt;bash-git-prompt&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;customizing-the-git-prompt&quot;&gt;Customizing the Git Prompt&lt;/h2&gt;
&lt;p&gt;The themes that come bundled with &lt;a href=&quot;https://github.com/magicmonty/bash-git-prompt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash-git-prompt&lt;/code&gt;&lt;/a&gt; displayed too much information for my taste, and the symbols in the default theme are not particularly meaningful.&lt;/p&gt;

&lt;p&gt;After trying different themes, I decided to bake my own. I wanted something that emphasized the important bits and pieces, looked clean, and was easy to understand. Fortunately, the plugin provides a command to generate a custom theme file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git_prompt_make_custom_theme Default&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The command creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.git-prompt-colors.sh&lt;/code&gt; based on the default theme and will get loaded by the plugin automatically, so you can start playing with the variables right away. However, you may need to dive into the source code to figure out how each variable is used, and find the ones you want to customize.&lt;/p&gt;

&lt;p&gt;After tweaking the variables for a while, I was able to create a custom theme. The expresiveness of emojis made it a lot easier for me to understand the current git status :sweat_smile:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/bash-git-prompt/git-prompt-emoji.png&quot; alt=&quot;Emoji Theme&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;override_git_prompt_colors() {
  GIT_PROMPT_THEME_NAME=&amp;quot;Custom&amp;quot;

  PathShort=&amp;quot;\W&amp;quot; # Display only the current folder

  # Display the current folder first
  GIT_PROMPT_START_USER=&amp;quot;${Green}${PathShort}&amp;quot;
  GIT_PROMPT_START_ROOT=&amp;quot;${Green}${PathShort}&amp;quot;

  # Skip the default prefix
  GIT_PROMPT_PREFIX=&amp;quot;${ResetColor}&amp;quot;

  # Use whitespace as separator
  GIT_PROMPT_SEPARATOR=&amp;quot; &amp;quot;

  # Skip remote branch
  GIT_PROMPT_REMOTE=&amp;quot;${ResetColor}&amp;quot;
  GIT_PROMPT_UPSTREAM=&amp;quot;${ResetColor}&amp;quot;

  # Use yellow for the current branch
  GIT_PROMPT_BRANCH=&amp;quot;${Yellow}&amp;quot;

  # Use red and green for behind and ahead origin
  GIT_PROMPT_SYMBOLS_BEHIND=&amp;quot;${Red} ↓&amp;quot;
  GIT_PROMPT_SYMBOLS_AHEAD=&amp;quot;${Green} ↑&amp;quot;

  # Add a few emojis to make it fun!
  GIT_PROMPT_STAGED=&amp;quot;${Yellow}👍 &amp;quot;
  GIT_PROMPT_CONFLICTS=&amp;quot;${Red}❌ &amp;quot;
  GIT_PROMPT_CHANGED=&amp;quot;${Yellow}✏️ &amp;quot;
  GIT_PROMPT_UNTRACKED=&amp;quot;❔ &amp;quot;
  GIT_PROMPT_STASHED=&amp;quot;${Yellow}📦 &amp;quot; # A lot nicer than the default flag
  GIT_PROMPT_CLEAN=&amp;quot;${ResetColor}✅ &amp;quot;  
  GIT_PROMPT_SYMBOLS_NO_REMOTE_TRACKING=&amp;quot; 🔒 &amp;quot; # Displayed for untracked brances

  # Skip the default suffix
  GIT_PROMPT_SUFFIX=&amp;quot; &amp;quot;

  # Skip the default ending
  GIT_PROMPT_END_USER=&amp;quot;${ResetColor}&amp;quot;
  GIT_PROMPT_END_ROOT=&amp;quot;${ResetColor}&amp;quot;
}

reload_git_prompt_colors &amp;quot;Custom&amp;quot;
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ElMassimo/515d12ab6db95dbb233c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Emojis are a great way to make ye olde terminal a bit more fun! :tada:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It would be awesome if &lt;a href=&quot;https://github.com/magicmonty/bash-git-prompt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash-git-prompt&lt;/code&gt;&lt;/a&gt; provided a way to customize the full prompt order and displayed elements, with a template string like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;GIT_PROMPT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{PathShort}{Branch}{Remote}{Modified}{Staged}{Clean}&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That would make it possible to create very different themes, as well as opting out of certain information—like git stashes.&lt;/p&gt;

&lt;p&gt;For now, I’m pleased with the result; it’s practical, looks nice, and I don’t need to type &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch&lt;/code&gt; to check the current branch :sunglasses:&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/bash-git-prompt.jpg" />
    <author>
      <name>Máximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
  </entry>

  <entry>
    <title>Ruby &amp;amp; to_proc</title>
    <link href="http://maximomussini.com/posts/ruby-to_proc/" rel="alternate" type="text/html" title="Ruby &amp; to_proc" />
    <published>2015-12-07T18:22:00-03:00</published>
  
    <updated>2015-12-07T18:22:00-03:00</updated>
  
    <id>http://maximomussini.com/posts/ruby-to_proc</id>
    <content type="html" xml:base="http://maximomussini.com/posts/ruby-to_proc/">
      &lt;img src=&quot;http://maximomussini.com/images/posts/ruby-to_proc.jpg&quot; alt=&quot;Post Image&quot; class=&quot;post-image&quot;/&gt;
      &lt;p&gt;Blocks are a very unique part of Ruby’s syntax. Let’s look at a simple example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Jane Jim Jenny&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When performing this kind of functional transformation, it’s tedious to write a block to perform a simple method call. An extremely common idiom in Ruby uses symbols to specify the method that should be called:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!-- &gt; Sweet :cake:&lt;br/&gt;But how does it work? --&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sweet! :cake:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Ruby, the ampersand operator &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; can coerce an object into a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt; by calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;to_proc&lt;/code&gt; method if it’s defined. More generally, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;object&lt;/code&gt; will be evaluated in the following way:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;object is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; converts it to a block.&lt;/li&gt;
  &lt;li&gt;object is not a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; tries to call &lt;code class=&quot;highlighter-rouge&quot;&gt;to_proc&lt;/code&gt; on the object, and then converts it to a block.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# is the same than&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;Huh? :confused:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It turns out the &lt;em&gt;magic&lt;/em&gt; is in how Ruby defines &lt;code class=&quot;highlighter-rouge&quot;&gt;to_proc&lt;/code&gt; for symbols. In recent versions of Ruby, the method is &lt;a href=&quot;http://ruby-doc.org/core-2.2.3/Symbol.html#method-i-to_proc&quot;&gt;defined in C&lt;/a&gt;, but it would look like this in Ruby:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Symbol&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Back to our snippet, let’s expand the &lt;code class=&quot;highlighter-rouge&quot;&gt;to_proc&lt;/code&gt; call incrementally until we arrive at the same block we would write by hand:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# We can expand it to&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Replacing &quot;to_proc&quot; with the result of calling the method&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# &quot;map&quot; passes a single argument to the block, so we can simplify&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Calling the method directly we get&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Since &quot;&amp;amp;&quot; transforms Procs and Lambdas to blocks, it&#39;s equivalent to&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So there you have it, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; will coerce the &lt;code class=&quot;highlighter-rouge&quot;&gt;:to_s&lt;/code&gt; symbol by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;to_proc&lt;/code&gt;, and then transform the resulting proc or lambda to a block.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There’s nothing special about the shorthand &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;:method&lt;/code&gt; syntax. Ruby arbitrarily defines &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol#to_proc&lt;/code&gt; in a way that allows programmers to avoid some boilerplate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;a-world-of-proc-earthamericas&quot;&gt;A world of proc :earth_americas:&lt;/h2&gt;
&lt;p&gt;Now that we understand what is really going on, we could use &lt;code class=&quot;highlighter-rouge&quot;&gt;to_proc&lt;/code&gt; for our own benefit by defining it in our objects and classes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ostruct&#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Formula&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@formula&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;^&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;**&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;OpenStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;x^2 + y^2&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;y: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;y: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;y: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [2, 25, 74]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We may also define &lt;code class=&quot;highlighter-rouge&quot;&gt;to_proc&lt;/code&gt; at the class level, allowing us to pass a class as a block:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Formula&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;x^2 + y^2&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;x + y^3&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [#&amp;lt;Formula @formula=&quot;x**2 + y**2&quot;&amp;gt;, #&amp;lt;Formula: @formula=&quot;x + y**3&quot;&amp;gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;a-note-on-performance-barchart&quot;&gt;A note on performance :bar_chart:&lt;/h2&gt;
&lt;p&gt;Running some benchmarks in Ruby 2.2.3, it seems that there is not an important performance penalty from using &lt;code class=&quot;highlighter-rouge&quot;&gt;to_proc&lt;/code&gt;. I wrote a small &lt;a href=&quot;https://gist.github.com/ElMassimo/2183ffc0401d1157c78e&quot;&gt;benchmark&lt;/a&gt; that you can &lt;a href=&quot;https://gist.github.com/ElMassimo/2183ffc0401d1157c78e&quot;&gt;run&lt;/a&gt; if you are curious :smiley:&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;There’s nothing special about the shorthand &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;:method&lt;/code&gt; syntax. Ruby defines &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol#to_proc&lt;/code&gt; in a particular way that allows programmers to avoid some boilerplate, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; operator can coerce any object into a block by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;to_proc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol#to_proc&lt;/code&gt; is so ubiquitous that there’s no harm in using it; most of the times it can help to keep the code terse without any downsides.&lt;/p&gt;

&lt;p&gt;However, it’s better to stay away from &lt;code class=&quot;highlighter-rouge&quot;&gt;to_proc&lt;/code&gt; in everyday usage, since it is as obscure as it is powerful. Defining &lt;code class=&quot;highlighter-rouge&quot;&gt;to_proc&lt;/code&gt; for custom objects can make it very difficult to reason about the code, which defeats the purpose of using it in the first place.&lt;/p&gt;
    </content>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://maximomussini.com/images/posts/ruby-to_proc.jpg" />
    <author>
      <name>Máximo Mussini</name>
      <email>maximomussini@gmail.com</email>
    </author>
    <category term="posts" />
  
  
    <summary>Blocks are a very unique part of Ruby&#39;s syntax, but sometimes it can be tedious to write a block to perform a simple method call. An extremely common idiom in Ruby uses symbols to specify the method that should be called, but.. how does it work?</summary>
  
  </entry>

</feed>
