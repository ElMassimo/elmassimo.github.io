<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="http://jekyllrb.com" version="2.4.0">Jekyll</generator>
<link href="http://maximomussini.com/feed.xml" rel="self" type="application/atom+xml" />
<link href="http://maximomussini.com/" rel="alternate" type="text/html" />
<updated>2015-12-02T12:08:23-02:00</updated>
<id>http://maximomussini.com/</id>
<title>Máximo Mussini · Code and Design</title>
<subtitle>Thoughts about development and product design.</subtitle>
<entry>
<title>One Does Not Simply Extend Mongoid</title>
<link href="http://maximomussini.com/posts/mongoid_includes" rel="alternate" type="text/html" title="One Does Not Simply Extend Mongoid" />
<published>2015-11-30T22:46:00-02:00</published>
<updated>2015-11-30T22:46:00-02:00</updated>
<id>http://maximomussini.com/posts/mongoid_includes</id>
<content type="html" xml:base="http://maximomussini.com/posts/mongoid_includes">&lt;p&gt;&lt;em&gt;Mongoid&lt;/em&gt; is not designed for extensibility; if you need to modify its behaviour in a slight way, you will probably have no choice but to &lt;em&gt;monkey-patch&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;A while ago I was working on a feature that required displaying information from several &lt;em&gt;mongodb&lt;/em&gt; collections. The performance was pretty bad, since for each item being displayed it was necessary to traverse nested and polymorphic associations to get the rest of the data.&lt;/p&gt;

&lt;p&gt;Although &lt;em&gt;Mongoid&lt;/em&gt; provides eager loading support &lt;a href=&quot;{{ page.previous.url }}&quot;&gt;out of the box&lt;/a&gt;, it has a few limitations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;No Nested&lt;/strong&gt;: Only direct relations can be eager loaded.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No Polymorphic&lt;/strong&gt;: Polymorphic relations can’t be included.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Criteria-only&lt;/strong&gt;: It’s only possible to use eager loading with a &lt;code&gt;Mongoid::Criteria&lt;/code&gt; object. We can’t leverage the functionality if we have a list of objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, one of those traversed associations was both &lt;strong&gt;nested &amp;amp; polymorphic&lt;/strong&gt;, so in the beginning the only available solution was to eager load the relations manually.&lt;/p&gt;

&lt;p&gt;After thinking about it for a while, I decided to give it a shot and come up with an extension to eager load polymorphic and nested associations, and do away with all the boilerplate that is necessary to perform eager loading.&lt;/p&gt;

&lt;h2 id=&quot;mongoidincludes-img-classemoji-titlegem-altgem-srchttpsassetsgithubcomimagesiconsemojiunicode1f48epng-height20-width20-alignabsmiddle-&quot;&gt;Mongoid::Includes &lt;img class=&quot;emoji&quot; title=&quot;:gem:&quot; alt=&quot;:gem:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f48e.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/h2&gt;
&lt;p&gt;When writing the library, I picked a few constraints in order to give the project a clear direction:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reuse &lt;em&gt;Mongoid’s&lt;/em&gt; eager loading functionality as building blocks.&lt;/li&gt;
  &lt;li&gt;Fail-fast, or as early as possible.&lt;/li&gt;
  &lt;li&gt;Cover only the most common use cases.&lt;/li&gt;
  &lt;li&gt;Allow to override eager loading for the not so common ones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Choosing these constraints allowed me to keep the library fairly small, without compromising its usefulness in more complex scenarios.&lt;/p&gt;

&lt;p&gt;The result is &lt;a href=&quot;{{ page.github }}&quot;&gt;&lt;code&gt;mongoid_includes&lt;/code&gt;&lt;/a&gt;, a gem that enhances support for eager loading in &lt;em&gt;Mongoid&lt;/em&gt;, allowing to include polymorphic and nested associations, and modify eager loading queries on the fly.&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
Album.includes(:songs).includes(:musicians, from: :band)&lt;/p&gt;

&lt;p&gt;Band.includes(:albums, with: -&amp;gt;(albums) { albums.gt(release: 1970).limit(2) })
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Mongoid::Includes&lt;/code&gt; extends the &lt;code&gt;includes&lt;/code&gt; method to support polymorphic associations without any syntax change. For nested includes, it expects a &lt;code&gt;:from&lt;/code&gt; option, indicating from which relation the include is going to be performed, eager loading it as well.&lt;/p&gt;

&lt;p&gt;While those are the most typical cases, it also supports a &lt;code&gt;:with&lt;/code&gt; option which conveniently allows to modify the default query, and a &lt;code&gt;:loader&lt;/code&gt; option which receives the foreign keys of the documents to include.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Polymorphic or nested includes might be a sign of a poorly designed schema. &lt;a href=&quot;{{ page.github }}&quot;&gt;&lt;code&gt;mongoid_includes&lt;/code&gt;&lt;/a&gt; is very easy to use, but it should only be used if it’s truly necessary.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;extending-mongoid&quot;&gt;Extending Mongoid&lt;/h2&gt;
&lt;p&gt;Although it was possible to reuse the eager loading logic in &lt;em&gt;Mongoid&lt;/em&gt;, doing so required a lot of fiddling and monkey-patching (using &lt;code&gt;prepend&lt;/code&gt;), since the library does not provide any point of extension.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mongoid’s&lt;/em&gt; eager loading was written to work with queries, and assumes that the included documents will match an association on the model, so it relies on the association metadata to perform the includes. There is no simple way to reuse the logic without using relation metadata.&lt;/p&gt;

&lt;p&gt;The biggest downside though, is that there is no way to perform eager loading for a set of documents, since the code relies on the contract of &lt;code&gt;Mongoid::Criteria&lt;/code&gt;. We can’t use eager loading if we triggered the query by using any &lt;code&gt;Enumerable&lt;/code&gt; method, or got the models by aggregation or any in-memory operation &lt;img class=&quot;emoji&quot; title=&quot;:disappointed_relieved:&quot; alt=&quot;:disappointed_relieved:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f625.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It would be a lot easier to extend &lt;em&gt;Mongoid’s&lt;/em&gt; functionality if it had a more modular design. Adding support for plugins that can be attached to the query lifecycle would be a huge step in that direction—less patching means more and better extensions.&lt;/p&gt;

&lt;h2 id=&quot;a-better-way&quot;&gt;A Better Way&lt;/h2&gt;
&lt;p&gt;Some ORMs take a very different approach when it comes to eager loading. &lt;a href=&quot;https://github.com/elixir-lang/ecto&quot;&gt;Ecto&lt;/a&gt;, a popular database wrapper for the &lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt; language, has a different &lt;a href=&quot;http://hexdocs.pm/ecto/Ecto.html&quot;&gt;philosophy&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE: Ecto does not lazy load associations. While lazily loading associations may sound convenient at first, in the long run it becomes a source of confusion and performance issues.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a long time &lt;em&gt;Mongoid&lt;/em&gt; user, I can painfully relate to this statement. &lt;a href=&quot;{{ page.previous.url }}&quot;&gt;N+1 queries&lt;/a&gt; are one of the fastest ways to degrade performance, and lazy loading associations makes it a lot easier to introduce them by accident. By not implementing lazy loading, the library becomes a lot simpler, and it encourages good practices and efficient data access patterns &lt;img class=&quot;emoji&quot; title=&quot;:tropical_drink:&quot; alt=&quot;:tropical_drink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f379.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ecto also allows you to modify which models will be included for an association—like the &lt;code&gt;:with&lt;/code&gt; option in &lt;a href=&quot;{{ page.github }}&quot;&gt;&lt;code&gt;mongoid_includes&lt;/code&gt;&lt;/a&gt;—and you can also preload associations on a given model or models after they have been fetched from the database using the &lt;a href=&quot;http://hexdocs.pm/ecto/Ecto.Repo.html#c:preload/2&quot;&gt;&lt;code&gt;Repo.preload/2&lt;/code&gt;&lt;/a&gt; method. So much win!&lt;/p&gt;

&lt;p&gt;Playing with Ecto inspired me to keep looking for a better solution for eager loading in &lt;em&gt;Mongoid&lt;/em&gt;. &lt;code&gt;Mongoid::Includes&lt;/code&gt; solves the first two limitations, but wouldn’t it be great if we could preload documents without a query? &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;
</content>
<category term="posts" />
<summary>Mongoid is not designed for extensibility; if you need to modify its behaviour in a slight way, you will probably have no choice but to monkey-patch it.</summary>
</entry>
<entry>
<title>Avoiding the N+1 problem in Mongoid</title>
<link href="http://maximomussini.com/posts/mongoid-n+1" rel="alternate" type="text/html" title="Avoiding the N+1 problem in Mongoid" />
<published>2015-10-30T19:30:00-02:00</published>
<updated>2015-10-30T19:30:00-02:00</updated>
<id>http://maximomussini.com/posts/mongoid-n+1</id>
<content type="html" xml:base="http://maximomussini.com/posts/mongoid-n+1">&lt;p&gt;One of the downsides of using an ORM is that it abstracts the queries in a way that it’s difficult to understand which queries are being performed; it’s harder to notice inefficient queries, since we didn’t actually write them!&lt;/p&gt;

&lt;p&gt;A performance issue that is very common when using ORMs is the &lt;em&gt;N+1 query&lt;/em&gt; problem. This anti-pattern usually occurs when trying to load related information for each item in a list of results.&lt;/p&gt;

&lt;p&gt;Since most ORMs don’t perform eager loading by default (to avoid fetching more data than necessary), it’s necessary to make extra queries &lt;em&gt;per item&lt;/em&gt; to fetch the related data. Imagine that we have a simple music store app:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
class Band
  include Mongoid::Document
  has_many :albums
end&lt;/p&gt;

&lt;p&gt;class Album
  include Mongoid::Document
  belongs_to :band
  has_many :songs
end&lt;/p&gt;

&lt;p&gt;class Song
  include Mongoid::Document
  belongs_to :album
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;A classic appearance of the &lt;em&gt;N+1 problem&lt;/em&gt; would be:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
albums = Album.where(year: 1970)&lt;/p&gt;

&lt;p&gt;albums.each do |album|
  puts “Album: #{album.name}, Band: #{album.band.name}”
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;In this example, we are loading a list of albums (the first query) and then loading the related band for each album, making one query &lt;em&gt;per album&lt;/em&gt;. With a list of &lt;em&gt;N albums&lt;/em&gt;, we make 1 query to get the albums and N queries to get the bands: a total of &lt;em&gt;N+1 queries&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The problem can also appear in other scenarios, such as more complex object graph traversals. In those cases, it can be much harder to spot the cause.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To understand why this is inefficient, we need to consider the impact of latency in the response time. Even if each of the &lt;em&gt;N queries&lt;/em&gt; is executed quickly, each query requires one database round trip. This latency will add up linearly as &lt;em&gt;N&lt;/em&gt; increases, which can have a devastating effect in the response time.&lt;/p&gt;

&lt;h2 id=&quot;avoiding-the-n1-problem&quot;&gt;Avoiding the N+1 problem&lt;/h2&gt;

&lt;p&gt;A solution to the &lt;em&gt;N+1 problem&lt;/em&gt; is to eagerly load the documents that we need, so that when we access a relation it’s already preloaded and doesn’t trigger a query.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Mongoid&lt;/em&gt;, we can do this by running an &lt;code&gt;$in&lt;/code&gt; query using the relation foreign keys to fetch all the related records, and then assign the relations in memory using &lt;code&gt;set_relation&lt;/code&gt;. This way, we only perform a single query to fetch a relation, regardless of the amount of documents returned by the first query.&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
band_ids = albums.map(&amp;amp;:band_id)&lt;/p&gt;

&lt;p&gt;bands = Band.in(id: band_ids)&lt;/p&gt;

&lt;p&gt;bands = bands.index_by(&amp;amp;:id)
albums.each do |album|
  album.set_relation(:band, bands[album.band_id])
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The algorithm changes slightly depending on the type of relation we want to &lt;em&gt;include&lt;/em&gt;, and how the foreign keys are stored, but the idea is the same: get a list of foreign keys, use them to make a query to fetch the related documents, and assign the relations in memory using the foreign keys to match the objects.&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
album_ids = albums.map(&amp;amp;:id)&lt;/p&gt;

&lt;p&gt;songs = Song.in(album_id: album_ids)&lt;/p&gt;

&lt;p&gt;album_songs = songs.group_by(&amp;amp;:album_id)
albums.each do |album|
  album.set_relation(:songs, album_songs[album.id])
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Although eager loading the documents manually is not very complex, writing this logic every time is cumbersome, error-prone, and hard to maintain.&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;em&gt;Mongoid&lt;/em&gt; has baked-in support to eager load relations using the &lt;code&gt;includes&lt;/code&gt; method, which allows to specify all the relations that we want to eager load once the query is made. The following is equivalent to the two snippets above:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
albums.includes(:band, :songs)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Easy, right? This becomes extremely useful when trying to avoid those sneaky &lt;em&gt;N+1 queries&lt;/em&gt; we were talking about &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;performance-considerations&quot;&gt;Performance Considerations&lt;/h2&gt;

&lt;p&gt;Although eager loading can be helpful, it’s important to be aware that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It takes a lot of processing to obtain the foreign keys, fetch the documents from the database, traverse them, and assign them to the objects in memory.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$in&lt;/code&gt; queries are usually slower, and get slower as the amount of values increases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the times, the overhead of processing in memory and making a more complex query is lower than the latency of issuing a lot of queries separately. Rewriting the code to eager load the relations that we need will usually improve the performance.&lt;/p&gt;

&lt;p&gt;As with any performance optimization, there might be some corner cases where eager loading is slower. It’s important to run benchmarks and measure the response time to verify that it’s worth it to use eager loading &lt;img class=&quot;emoji&quot; title=&quot;:bar_chart:&quot; alt=&quot;:bar_chart:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f4ca.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Always keep an eye out for this anti-pattern; accessing the database in a naive way will hurt the performance. Using a tool like &lt;a href=&quot;https://github.com/flyerhzm/bullet&quot;&gt;&lt;code&gt;bullet&lt;/code&gt;&lt;/a&gt; can help to detect N+1 queries or unused includes, but it’s better to use it as a safety net for the cases that slipped past our manual control.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Have in mind that in &lt;em&gt;mongodb&lt;/em&gt; it’s possible to embed the related documents instead of storing them in separate collections. Depending on the domain requirements, it can be a very good way to get the best out of the database, and avoid the problem entirely.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thinking about data access from the beginning yields the best results, because it allow us to spot potential inefficiencies, and find alternative queries that perform better.&lt;/p&gt;

&lt;h2 id=&quot;limitations-in-mongoid&quot;&gt;Limitations in Mongoid&lt;/h2&gt;

&lt;p&gt;Eager loading in &lt;em&gt;Mongoid&lt;/em&gt; has some limitations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Criteria-only&lt;/strong&gt;: It’s only possible to use eager loading with a &lt;code&gt;Mongoid::Criteria&lt;/code&gt; object. We can’t leverage the functionality if we have a list of objects.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No Nested&lt;/strong&gt;: Only direct relations can be included, nested relations can’t be eagerly loaded (like &lt;code&gt;band.albums.songs&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No Polymorphic&lt;/strong&gt;: Polymorphic relations can’t be included.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first limitation exists because &lt;em&gt;Mongoid&lt;/em&gt; relies on the metadata to pick the appropriate eager loading algorithm. The relation metadata allows to infer things like foreign key names, the name of the database collection, and the name of the setter method for the relation.&lt;/p&gt;

&lt;p&gt;I have solved the other limitations in &lt;a href=&quot;https://github.com/ElMassimo/mongoid_includes&quot;&gt;&lt;code&gt;mongoid_includes&lt;/code&gt;&lt;/a&gt; &lt;img class=&quot;emoji&quot; title=&quot;:gem:&quot; alt=&quot;:gem:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f48e.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;, which extends the &lt;code&gt;includes&lt;/code&gt; method to support eager loading polymorphic and nested associations.&lt;/p&gt;

&lt;p&gt;You can check &lt;a href=&quot;{{ page.next.url }}&quot;&gt;the next post&lt;/a&gt; where I talk about this gem and explain the motivation behind it, as well as the difficulties of extending &lt;em&gt;Mongoid&lt;/em&gt; &lt;img class=&quot;emoji&quot; title=&quot;:smiley:&quot; alt=&quot;:smiley:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f603.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;
</content>
<category term="posts" />
<summary>One of the downsides of using an ORM is that it abstracts the queries in a way that it’s difficult to understand which queries are being performed; it’s harder to notice inefficient queries, since we didn’t actually write them!</summary>
</entry>
<entry>
<title>Breaking Mongoid Inheritance</title>
<link href="http://maximomussini.com/posts/mongoid-inheritance" rel="alternate" type="text/html" title="Breaking Mongoid Inheritance" />
<published>2015-10-12T23:29:00-02:00</published>
<updated>2015-10-12T23:29:00-02:00</updated>
<id>http://maximomussini.com/posts/mongoid-inheritance</id>
<content type="html" xml:base="http://maximomussini.com/posts/mongoid-inheritance">&lt;p&gt;By default, &lt;a href=&quot;http://mongoid.github.io/&quot;&gt;&lt;em&gt;Mongoid&lt;/em&gt;&lt;/a&gt; will use &lt;a href=&quot;http://martinfowler.com/eaaCatalog/singleTableInheritance.html&quot;&gt;single-collection inheritance&lt;/a&gt; when extending a Ruby class, by storing a &lt;code&gt;_type&lt;/code&gt; attribute in every document in the collection that contains the concrete class name, and using it to instantiate the object properly when fetching a document from the database.&lt;/p&gt;

&lt;p&gt;In addition, it will handle the hierarchy in queries, by allowing to query the parent class to return documents from any subclass, or query a specific subclass to fetch only documents of that specific type. In order to do this efficiently, &lt;em&gt;Mongoid&lt;/em&gt; will check for existing indexes that contain &lt;code&gt;_type&lt;/code&gt; as a prefix, or add a &lt;code&gt;{ _type: 1 }&lt;/code&gt; index.&lt;/p&gt;

&lt;p&gt;As a consequence of the approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Storage size increases since we need to store an additional attribute on every document. The smaller the document, the bigger the impact of this extra field.&lt;/li&gt;
  &lt;li&gt;For large collections, adding a &lt;code&gt;_type&lt;/code&gt; index or prefix it to existing ones to create compound indexes could be a concern, since large indexes might not fit in memory, which would quickly degrade the performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bah, trade-offs. It’s still awesome &lt;img class=&quot;emoji&quot; title=&quot;:smirk:&quot; alt=&quot;:smirk:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f60f.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While this behaviour is usually desirable, there are some scenarios where it’s suitable to use inheritance in Ruby but it doesn’t make sense to store different classes of the hierarchy in the same collection.&lt;/p&gt;

&lt;p&gt;In particular, if subclasses will always be queried independently, we can &lt;strong&gt;store each type in a different collection&lt;/strong&gt;, which will improve the performance because it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Doesn’t require additional indexes.&lt;/li&gt;
  &lt;li&gt;Doesn’t require extra information in each document.&lt;/li&gt;
  &lt;li&gt;Provides a natural way to partition the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Easy. Just use mixins to share code between the subclasses, &lt;em&gt;Mongoid&lt;/em&gt; will store them in separate collections &lt;img class=&quot;emoji&quot; title=&quot;:relieved:&quot; alt=&quot;:relieved:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f60c.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;an-example-smallmore-like-a-very-contrived-example-img-classemoji-titlesmile-altsmile-srchttpsassetsgithubcomimagesiconsemojiunicode1f604png-height20-width20-alignabsmiddle-small&quot;&gt;An example &lt;small&gt;(more like “A Very Contrived Example” &lt;img class=&quot;emoji&quot; title=&quot;:smile:&quot; alt=&quot;:smile:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f604.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;)&lt;/small&gt;&lt;/h2&gt;

&lt;p&gt;Let’s imagine that we have a drawing app, where you can draw many triangles on a canvas, and need to choose between three different drawing modes: regular, equilateral, or isosceles.&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
class Triangle
  include Mongoid::Document
  …
end&lt;/p&gt;

&lt;p&gt;class IsoscelesTriangle &amp;lt; Triangle
  validate_two_sides_are_equal
end&lt;/p&gt;

&lt;p&gt;class EquilateralTriangle &amp;lt; Triangle
  validate_all_sides_are_equal
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;We can take advantage of this restriction and store each type of triangle in a separate collection, which will prevent the database from scanning more documents than necessary to execute our queries.&lt;/p&gt;

&lt;p&gt;This will be more efficient than adding an extra &lt;code&gt;_type&lt;/code&gt; attribute and index, which is the default behaviour provided by &lt;em&gt;Mongoid&lt;/em&gt; when inheriting a model. If we want to make this work, we will need to avoid &lt;em&gt;Mongoid&lt;/em&gt;’s single-collection inheritance.&lt;/p&gt;

&lt;h3 id=&quot;mixins&quot;&gt;Mixins&lt;/h3&gt;
&lt;p&gt;Using mixins to share the code is a nice way to get the job done, but in this case it falls short because &lt;code&gt;Triangle&lt;/code&gt; (the base class) is not abstract—turning it into a module wouldn’t allow us to instantiate it. We can deal with this by creating a module that contains the code that we want to reuse.&lt;/p&gt;

&lt;p&gt;We shall name it &lt;code&gt;Trianglable&lt;/code&gt;. Hmm, sounds weird, let’s go with &lt;code&gt;Trilateral&lt;/code&gt;. Maybe &lt;code&gt;BaseTriangle&lt;/code&gt;? &lt;code&gt;Triangleness&lt;/code&gt;? Damn, names are tough &lt;img class=&quot;emoji&quot; title=&quot;:tired_face:&quot; alt=&quot;:tired_face:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f62b.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
module AbstractTriangle
  include Mongoid::Document
  …
end&lt;/p&gt;

&lt;p&gt;class Triangle
  include AbstractTriangle
end&lt;/p&gt;

&lt;p&gt;class IsoscelesTriangle
  include AbstractTriangle
  validate_two_sides_are_equal
end&lt;/p&gt;

&lt;p&gt;class EquilateralTriangle
  include AbstractTriangle
  validate_all_sides_are_equal
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Much better &lt;img class=&quot;emoji&quot; title=&quot;:neutral_face:&quot; alt=&quot;:neutral_face:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f610.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;using-inheritance&quot;&gt;Using Inheritance&lt;/h3&gt;

&lt;p&gt;In cases like this I would like to start with inheritance, which can make the code easier to follow, and move to the mixin approach or composition as the requirements change and some of the behaviour or logic in the base class should no longer be shared with the subclasses.&lt;/p&gt;

&lt;p&gt;When facing a similar situation recently, I decided to take a look at &lt;em&gt;Mongoid&lt;/em&gt; internals and find out if it was viable to prevent the unwanted STI behaviour. Ideally, we would get standard Ruby inheritance, without the subclass being handled differently by &lt;em&gt;Mongoid&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The first thing to do, was to look for an &lt;a href=&quot;http://ruby-doc.org/core-2.2.0/Class.html#method-i-inherited&quot;&gt;&lt;code&gt;inherited&lt;/code&gt;&lt;/a&gt; hook in one of the many modules inside the library, which happened to be in &lt;a href=&quot;https://github.com/mongodb/mongoid/blob/d787ec40e5554d7e09a1c4d4cc95c5251ec279eb/lib/mongoid/traversable.rb#L193&quot;&gt;&lt;code&gt;Mongoid::Traversable&lt;/code&gt;&lt;/a&gt;. Unfortunately, there’s a lot going on in that method; &lt;em&gt;Mongoid&lt;/em&gt; doesn’t make it easy to extend or modify its functionality in a clean way.&lt;/p&gt;

&lt;p&gt;Feeling determined, I chose to hack my way into a solution. The result is the module below—hacky at best, more likely a problem waiting for the next &lt;em&gt;Mongoid&lt;/em&gt; update to blow up &lt;img class=&quot;emoji&quot; title=&quot;:hear_no_evil:&quot; alt=&quot;:hear_no_evil:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f649.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ElMassimo/f59432e4211c6fbb6e04.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;All things considered, it provided a nice balance between sharing code, keeping the storage and index size down, and maintaining a straightforward structure in the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/strong&gt;&lt;/p&gt;
</content>
<category term="posts" />
<summary>By default, Mongoid will use single-collection inheritance when extending a Ruby class, by storing a _type attribute in every document in the collection that contains the concrete class name, and using it to instantiate the object properly when fetching a document from the database.</summary>
</entry>
<entry>
<title>Less</title>
<link href="http://maximomussini.com/posts/less" rel="alternate" type="text/html" title="Less" />
<published>2015-10-01T00:09:00-03:00</published>
<updated>2015-10-01T00:09:00-03:00</updated>
<id>http://maximomussini.com/posts/less</id>
<content type="html" xml:base="http://maximomussini.com/posts/less">&lt;p&gt;Recently I’ve been digging into the &lt;a href=&quot;http://lesscode.is/&quot;&gt;&lt;em&gt;#lesscode&lt;/em&gt;&lt;/a&gt; movement, which proposes that software tools exist to solve real problems—a piece of code that doesn’t solve a problem is just waste. It also implies that frugality is a trademark of great designs; we should use it as an inspiration to create elegant software that focuses on solving the problem at hand.&lt;/p&gt;

&lt;p&gt;This is related with other ideas like &lt;a href=&quot;http://www.amazon.com/Machine-That-Changed-World-Revolutionizing/dp/0743299795&quot;&gt;&lt;em&gt;lean manufacturing&lt;/em&gt;&lt;/a&gt;: focus all effort in the things that add value, and reduce everything else. This management philosophy was started by Toyota in the ’50s and later evolved to a business methodology called &lt;a href=&quot;http://www.amazon.com/Lean-Thinking-Banish-Create-Corporation-ebook/dp/B0048WQDIO&quot;&gt;&lt;em&gt;lean thinking&lt;/em&gt;&lt;/a&gt;, a way to apply the idea—of delivering more value while eliminating waste—to business in general.&lt;/p&gt;

&lt;p&gt;While both &lt;em&gt;lesscode&lt;/em&gt; and the lean methodologies share the idea of creating something valuable and cutting down the waste, &lt;em&gt;lesscode&lt;/em&gt; has a deeper emotional perspective. As a developer, you are responsible for any complexity in the solution.&lt;/p&gt;

&lt;p&gt;It’s by embracing the constraints—both natural and self-imposed, such as aiming for a great design—and gaining a sense of minimalism, that one is able to discover elegant and simple solutions, and find freedom.&lt;/p&gt;

&lt;p&gt;Freedom from bloated frameworks, freedom from cargo-cult programming, freedom from the fear of not understanding. Freedom to rid your code out of &lt;em&gt;excess and complexity&lt;/em&gt;, and &lt;strong&gt;focus on what matters&lt;/strong&gt;.&lt;/p&gt;
</content>
<category term="posts" />
<summary>Recently I’ve been digging into the #lesscode movement, which proposes that software tools exist to solve real problems—a piece of code that doesn’t solve a problem is just waste. It also implies that frugality is a trademark of great designs; we should use it as an inspiration to create elegant software that focuses on solving the problem at hand.</summary>
</entry>
</feed>
